
pose.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00001534  000015c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  008000ec  008000ec  00001654  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000016f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d1b  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d8  00000000  00000000  00003543  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e33  00000000  00000000  00003d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00004b50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043d  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c65  00000000  00000000  00005151  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00005db6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3e       	cpi	r26, 0xEC	; 236
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ac ee       	ldi	r26, 0xEC	; 236
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 31       	cpi	r26, 0x15	; 21
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 81 04 	call	0x902	; 0x902 <main>
      8a:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
      92:	95 b3       	in	r25, 0x15	; 21
      94:	9f 70       	andi	r25, 0x0F	; 15
      96:	28 2f       	mov	r18, r24
      98:	20 7f       	andi	r18, 0xF0	; 240
      9a:	92 2b       	or	r25, r18
      9c:	95 bb       	out	0x15, r25	; 21
      9e:	95 b3       	in	r25, 0x15	; 21
      a0:	9e 7f       	andi	r25, 0xFE	; 254
      a2:	95 bb       	out	0x15, r25	; 21
      a4:	95 b3       	in	r25, 0x15	; 21
      a6:	92 60       	ori	r25, 0x02	; 2
      a8:	95 bb       	out	0x15, r25	; 21
      aa:	35 e0       	ldi	r19, 0x05	; 5
      ac:	3a 95       	dec	r19
      ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Command+0x1a>
      b0:	00 00       	nop
      b2:	95 b3       	in	r25, 0x15	; 21
      b4:	9d 7f       	andi	r25, 0xFD	; 253
      b6:	95 bb       	out	0x15, r25	; 21
      b8:	ef e1       	ldi	r30, 0x1F	; 31
      ba:	f3 e0       	ldi	r31, 0x03	; 3
      bc:	31 97       	sbiw	r30, 0x01	; 1
      be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x2a>
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_Command+0x30>
      c2:	00 00       	nop
      c4:	25 b3       	in	r18, 0x15	; 21
      c6:	f0 e1       	ldi	r31, 0x10	; 16
      c8:	8f 9f       	mul	r24, r31
      ca:	c0 01       	movw	r24, r0
      cc:	11 24       	eor	r1, r1
      ce:	92 2f       	mov	r25, r18
      d0:	9f 70       	andi	r25, 0x0F	; 15
      d2:	89 2b       	or	r24, r25
      d4:	85 bb       	out	0x15, r24	; 21
      d6:	85 b3       	in	r24, 0x15	; 21
      d8:	82 60       	ori	r24, 0x02	; 2
      da:	85 bb       	out	0x15, r24	; 21
      dc:	35 e0       	ldi	r19, 0x05	; 5
      de:	3a 95       	dec	r19
      e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x4c>
      e2:	00 00       	nop
      e4:	85 b3       	in	r24, 0x15	; 21
      e6:	8d 7f       	andi	r24, 0xFD	; 253
      e8:	85 bb       	out	0x15, r24	; 21
      ea:	8f e3       	ldi	r24, 0x3F	; 63
      ec:	9f e1       	ldi	r25, 0x1F	; 31
      ee:	01 97       	sbiw	r24, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Command+0x5c>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Command+0x62>
      f4:	00 00       	nop
      f6:	08 95       	ret

000000f8 <LCD_Char>:
      f8:	95 b3       	in	r25, 0x15	; 21
      fa:	9f 70       	andi	r25, 0x0F	; 15
      fc:	28 2f       	mov	r18, r24
      fe:	20 7f       	andi	r18, 0xF0	; 240
     100:	92 2b       	or	r25, r18
     102:	95 bb       	out	0x15, r25	; 21
     104:	95 b3       	in	r25, 0x15	; 21
     106:	91 60       	ori	r25, 0x01	; 1
     108:	95 bb       	out	0x15, r25	; 21
     10a:	95 b3       	in	r25, 0x15	; 21
     10c:	92 60       	ori	r25, 0x02	; 2
     10e:	95 bb       	out	0x15, r25	; 21
     110:	35 e0       	ldi	r19, 0x05	; 5
     112:	3a 95       	dec	r19
     114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Char+0x1a>
     116:	00 00       	nop
     118:	95 b3       	in	r25, 0x15	; 21
     11a:	9d 7f       	andi	r25, 0xFD	; 253
     11c:	95 bb       	out	0x15, r25	; 21
     11e:	ef e1       	ldi	r30, 0x1F	; 31
     120:	f3 e0       	ldi	r31, 0x03	; 3
     122:	31 97       	sbiw	r30, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Char+0x2a>
     126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Char+0x30>
     128:	00 00       	nop
     12a:	25 b3       	in	r18, 0x15	; 21
     12c:	f0 e1       	ldi	r31, 0x10	; 16
     12e:	8f 9f       	mul	r24, r31
     130:	c0 01       	movw	r24, r0
     132:	11 24       	eor	r1, r1
     134:	92 2f       	mov	r25, r18
     136:	9f 70       	andi	r25, 0x0F	; 15
     138:	89 2b       	or	r24, r25
     13a:	85 bb       	out	0x15, r24	; 21
     13c:	85 b3       	in	r24, 0x15	; 21
     13e:	82 60       	ori	r24, 0x02	; 2
     140:	85 bb       	out	0x15, r24	; 21
     142:	35 e0       	ldi	r19, 0x05	; 5
     144:	3a 95       	dec	r19
     146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Char+0x4c>
     148:	00 00       	nop
     14a:	85 b3       	in	r24, 0x15	; 21
     14c:	8d 7f       	andi	r24, 0xFD	; 253
     14e:	85 bb       	out	0x15, r24	; 21
     150:	8f e3       	ldi	r24, 0x3F	; 63
     152:	9f e1       	ldi	r25, 0x1F	; 31
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Char+0x5c>
     158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Char+0x62>
     15a:	00 00       	nop
     15c:	08 95       	ret

0000015e <LCD_Init>:
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	84 bb       	out	0x14, r24	; 20
     162:	2f ef       	ldi	r18, 0xFF	; 255
     164:	89 ef       	ldi	r24, 0xF9	; 249
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	21 50       	subi	r18, 0x01	; 1
     16a:	80 40       	sbci	r24, 0x00	; 0
     16c:	90 40       	sbci	r25, 0x00	; 0
     16e:	e1 f7       	brne	.-8      	; 0x168 <LCD_Init+0xa>
     170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0x14>
     172:	00 00       	nop
     174:	82 e0       	ldi	r24, 0x02	; 2
     176:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     17a:	88 e2       	ldi	r24, 0x28	; 40
     17c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     180:	8c e0       	ldi	r24, 0x0C	; 12
     182:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     186:	86 e0       	ldi	r24, 0x06	; 6
     188:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     192:	8f e3       	ldi	r24, 0x3F	; 63
     194:	9f e1       	ldi	r25, 0x1F	; 31
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Init+0x38>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Init+0x3e>
     19c:	00 00       	nop
     19e:	08 95       	ret

000001a0 <LCD_String>:
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	8c 01       	movw	r16, r24
     1aa:	c0 e0       	ldi	r28, 0x00	; 0
     1ac:	d0 e0       	ldi	r29, 0x00	; 0
     1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <LCD_String+0x16>
     1b0:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_Char>
     1b4:	21 96       	adiw	r28, 0x01	; 1
     1b6:	f8 01       	movw	r30, r16
     1b8:	ec 0f       	add	r30, r28
     1ba:	fd 1f       	adc	r31, r29
     1bc:	80 81       	ld	r24, Z
     1be:	81 11       	cpse	r24, r1
     1c0:	f7 cf       	rjmp	.-18     	; 0x1b0 <LCD_String+0x10>
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	08 95       	ret

000001cc <LCD_right>:
}

void LCD_right(){
	LCD_Command(0x14);
     1cc:	84 e1       	ldi	r24, 0x14	; 20
     1ce:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     1d2:	84 e1       	ldi	r24, 0x14	; 20
     1d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     1d8:	84 e1       	ldi	r24, 0x14	; 20
     1da:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     1de:	84 e1       	ldi	r24, 0x14	; 20
     1e0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     1e4:	84 e1       	ldi	r24, 0x14	; 20
     1e6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     1ea:	84 e1       	ldi	r24, 0x14	; 20
     1ec:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     1f0:	08 95       	ret

000001f2 <ADC_Init>:
}

void ADC_Init()
{
	DDRA=0x0;	
     1f2:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;	
     1f4:	87 e8       	ldi	r24, 0x87	; 135
     1f6:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;
     1f8:	80 e4       	ldi	r24, 0x40	; 64
     1fa:	87 b9       	out	0x07, r24	; 7
     1fc:	08 95       	ret

000001fe <ADC_Read>:
}

int ADC_Read(char channel)
{
	int Ain,AinLow;
	ADMUX=ADMUX|(channel & 0x0f);
     1fe:	97 b1       	in	r25, 0x07	; 7
     200:	8f 70       	andi	r24, 0x0F	; 15
     202:	98 2b       	or	r25, r24
     204:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1<<ADSC);		
     206:	86 b1       	in	r24, 0x06	; 6
     208:	80 64       	ori	r24, 0x40	; 64
     20a:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);	
     20c:	34 9b       	sbis	0x06, 4	; 6
     20e:	fe cf       	rjmp	.-4      	; 0x20c <ADC_Read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     210:	35 e3       	ldi	r19, 0x35	; 53
     212:	3a 95       	dec	r19
     214:	f1 f7       	brne	.-4      	; 0x212 <ADC_Read+0x14>
     216:	00 00       	nop
	_delay_us(10);
	AinLow = (int)ADCL;		
     218:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*255;			
     21a:	85 b1       	in	r24, 0x05	; 5
     21c:	3f ef       	ldi	r19, 0xFF	; 255
     21e:	83 9f       	mul	r24, r19
     220:	c0 01       	movw	r24, r0
     222:	11 24       	eor	r1, r1
	Ain = Ain + AinLow;				
	return(Ain);			
}
     224:	82 0f       	add	r24, r18
     226:	91 1d       	adc	r25, r1
     228:	08 95       	ret

0000022a <disp_dist>:

void disp_dist(){
	write = steps*1.0;
     22a:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <steps>
     22e:	70 91 f7 00 	lds	r23, 0x00F7	; 0x8000f7 <steps+0x1>
     232:	07 2e       	mov	r0, r23
     234:	00 0c       	add	r0, r0
     236:	88 0b       	sbc	r24, r24
     238:	99 0b       	sbc	r25, r25
     23a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__floatsisf>
     23e:	ab 01       	movw	r20, r22
     240:	bc 01       	movw	r22, r24
     242:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <write>
     246:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <write+0x1>
     24a:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <write+0x2>
     24e:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <write+0x3>
	eeprom_write_float((float *) 20, write);
     252:	84 e1       	ldi	r24, 0x14	; 20
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 37 0a 	call	0x146e	; 0x146e <eeprom_write_dword>
	if (steps<=0){
     25a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <steps>
     25e:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <steps+0x1>
     262:	18 16       	cp	r1, r24
     264:	19 06       	cpc	r1, r25
     266:	8c f0       	brlt	.+34     	; 0x28a <disp_dist+0x60>
		steps=0;
     268:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <steps+0x1>
     26c:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <steps>
		dist = 0;
     270:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <dist+0x1>
     274:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <dist>
		dec = 0;
     278:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <dec+0x1>
     27c:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <dec>
		num = 0;
     280:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <num+0x1>
     284:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <num>
     288:	30 c0       	rjmp	.+96     	; 0x2ea <disp_dist+0xc0>
	}
	else{
		dist = 15*(steps/20);
     28a:	64 e1       	ldi	r22, 0x14	; 20
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	0e 94 47 07 	call	0xe8e	; 0xe8e <__divmodhi4>
     292:	8f e0       	ldi	r24, 0x0F	; 15
     294:	86 9f       	mul	r24, r22
     296:	a0 01       	movw	r20, r0
     298:	87 9f       	mul	r24, r23
     29a:	50 0d       	add	r21, r0
     29c:	11 24       	eor	r1, r1
     29e:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <dist+0x1>
     2a2:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <dist>
		dec = dist%100;
     2a6:	fa 01       	movw	r30, r20
     2a8:	f6 95       	lsr	r31
     2aa:	e7 95       	ror	r30
     2ac:	f6 95       	lsr	r31
     2ae:	e7 95       	ror	r30
     2b0:	9f 01       	movw	r18, r30
     2b2:	ab e7       	ldi	r26, 0x7B	; 123
     2b4:	b4 e1       	ldi	r27, 0x14	; 20
     2b6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__umulhisi3>
     2ba:	96 95       	lsr	r25
     2bc:	87 95       	ror	r24
     2be:	64 e6       	ldi	r22, 0x64	; 100
     2c0:	68 9f       	mul	r22, r24
     2c2:	90 01       	movw	r18, r0
     2c4:	69 9f       	mul	r22, r25
     2c6:	30 0d       	add	r19, r0
     2c8:	11 24       	eor	r1, r1
     2ca:	ca 01       	movw	r24, r20
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <dec+0x1>
     2d4:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <dec>
		num = dist/100;
     2d8:	9f 01       	movw	r18, r30
     2da:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__umulhisi3>
     2de:	96 95       	lsr	r25
     2e0:	87 95       	ror	r24
     2e2:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <num+0x1>
     2e6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <num>
	}
	LCD_Command(0x90);
     2ea:	80 e9       	ldi	r24, 0x90	; 144
     2ec:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_right();
     2f0:	0e 94 e6 00 	call	0x1cc	; 0x1cc <LCD_right>
	LCD_Command(0x14);
     2f4:	84 e1       	ldi	r24, 0x14	; 20
     2f6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     2fa:	84 e1       	ldi	r24, 0x14	; 20
     2fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     300:	84 e1       	ldi	r24, 0x14	; 20
     302:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	sprintf(text, "%d", num); /*2*2.5 ms*/
     306:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <num+0x1>
     30a:	8f 93       	push	r24
     30c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <num>
     310:	8f 93       	push	r24
     312:	84 e6       	ldi	r24, 0x64	; 100
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	9f 93       	push	r25
     318:	8f 93       	push	r24
     31a:	86 e0       	ldi	r24, 0x06	; 6
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	9f 93       	push	r25
     320:	8f 93       	push	r24
     322:	0e 94 7e 07 	call	0xefc	; 0xefc <sprintf>
	if (num<10){
     326:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <num>
     32a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <num+0x1>
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0a 97       	sbiw	r24, 0x0a	; 10
     33c:	48 f4       	brcc	.+18     	; 0x350 <disp_dist+0x126>
		LCD_String(" ");
     33e:	8b ed       	ldi	r24, 0xDB	; 219
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
		LCD_String(text);
     346:	86 e0       	ldi	r24, 0x06	; 6
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     34e:	04 c0       	rjmp	.+8      	; 0x358 <disp_dist+0x12e>
	}
	else{
		LCD_String(text);
     350:	86 e0       	ldi	r24, 0x06	; 6
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	}
	LCD_Command(0x14);
     358:	84 e1       	ldi	r24, 0x14	; 20
     35a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	sprintf(text, "%d", dec);
     35e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <dec+0x1>
     362:	8f 93       	push	r24
     364:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <dec>
     368:	8f 93       	push	r24
     36a:	84 e6       	ldi	r24, 0x64	; 100
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	9f 93       	push	r25
     370:	8f 93       	push	r24
     372:	86 e0       	ldi	r24, 0x06	; 6
     374:	91 e0       	ldi	r25, 0x01	; 1
     376:	9f 93       	push	r25
     378:	8f 93       	push	r24
     37a:	0e 94 7e 07 	call	0xefc	; 0xefc <sprintf>
	if (dec==0){
     37e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <dec>
     382:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <dec+0x1>
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	00 97       	sbiw	r24, 0x00	; 0
     394:	49 f4       	brne	.+18     	; 0x3a8 <disp_dist+0x17e>
		LCD_String("0");
     396:	8b e6       	ldi	r24, 0x6B	; 107
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
		LCD_String("0");
     39e:	8b e6       	ldi	r24, 0x6B	; 107
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     3a6:	08 95       	ret
	}
	else if(dec<10){
     3a8:	0a 97       	sbiw	r24, 0x0a	; 10
     3aa:	48 f4       	brcc	.+18     	; 0x3be <disp_dist+0x194>
		LCD_String("0");
     3ac:	8b e6       	ldi	r24, 0x6B	; 107
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
		LCD_String(text);
     3b4:	86 e0       	ldi	r24, 0x06	; 6
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     3bc:	08 95       	ret
	}
	else{
		LCD_String(text);
     3be:	86 e0       	ldi	r24, 0x06	; 6
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     3c6:	08 95       	ret

000003c8 <disp_av>:
	}
}

void disp_av(){
	write = steps*1.0;
     3c8:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <steps>
     3cc:	70 91 f7 00 	lds	r23, 0x00F7	; 0x8000f7 <steps+0x1>
     3d0:	07 2e       	mov	r0, r23
     3d2:	00 0c       	add	r0, r0
     3d4:	88 0b       	sbc	r24, r24
     3d6:	99 0b       	sbc	r25, r25
     3d8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__floatsisf>
     3dc:	ab 01       	movw	r20, r22
     3de:	bc 01       	movw	r22, r24
     3e0:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <write>
     3e4:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <write+0x1>
     3e8:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <write+0x2>
     3ec:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <write+0x3>
	eeprom_write_float((float *) 20, write);
     3f0:	84 e1       	ldi	r24, 0x14	; 20
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	0e 94 37 0a 	call	0x146e	; 0x146e <eeprom_write_dword>
	if (steps<=0){
     3f8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <steps>
     3fc:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <steps+0x1>
     400:	18 16       	cp	r1, r24
     402:	19 06       	cpc	r1, r25
     404:	8c f0       	brlt	.+34     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
		steps=0;
     406:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <steps+0x1>
     40a:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <steps>
		dist = 0;
     40e:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <dist+0x1>
     412:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <dist>
		dec = 0;
     416:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <dec+0x1>
     41a:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <dec>
		num = 0;
     41e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <num+0x1>
     422:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <num>
     426:	30 c0       	rjmp	.+96     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
	}
	else{
		dist = 15*(steps/20);
     428:	64 e1       	ldi	r22, 0x14	; 20
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	0e 94 47 07 	call	0xe8e	; 0xe8e <__divmodhi4>
     430:	8f e0       	ldi	r24, 0x0F	; 15
     432:	86 9f       	mul	r24, r22
     434:	a0 01       	movw	r20, r0
     436:	87 9f       	mul	r24, r23
     438:	50 0d       	add	r21, r0
     43a:	11 24       	eor	r1, r1
     43c:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <dist+0x1>
     440:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <dist>
		dec = dist%100;
     444:	fa 01       	movw	r30, r20
     446:	f6 95       	lsr	r31
     448:	e7 95       	ror	r30
     44a:	f6 95       	lsr	r31
     44c:	e7 95       	ror	r30
     44e:	9f 01       	movw	r18, r30
     450:	ab e7       	ldi	r26, 0x7B	; 123
     452:	b4 e1       	ldi	r27, 0x14	; 20
     454:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__umulhisi3>
     458:	96 95       	lsr	r25
     45a:	87 95       	ror	r24
     45c:	64 e6       	ldi	r22, 0x64	; 100
     45e:	68 9f       	mul	r22, r24
     460:	90 01       	movw	r18, r0
     462:	69 9f       	mul	r22, r25
     464:	30 0d       	add	r19, r0
     466:	11 24       	eor	r1, r1
     468:	ca 01       	movw	r24, r20
     46a:	82 1b       	sub	r24, r18
     46c:	93 0b       	sbc	r25, r19
     46e:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <dec+0x1>
     472:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <dec>
		num = dist/100;
     476:	9f 01       	movw	r18, r30
     478:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__umulhisi3>
     47c:	96 95       	lsr	r25
     47e:	87 95       	ror	r24
     480:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <num+0x1>
     484:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <num>
	}
	LCD_Command(0xC3);
     488:	83 ec       	ldi	r24, 0xC3	; 195
     48a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	sprintf(text, "%d", num); /*2*2.5 ms*/
     48e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <num+0x1>
     492:	8f 93       	push	r24
     494:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <num>
     498:	8f 93       	push	r24
     49a:	84 e6       	ldi	r24, 0x64	; 100
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	9f 93       	push	r25
     4a0:	8f 93       	push	r24
     4a2:	86 e0       	ldi	r24, 0x06	; 6
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	9f 93       	push	r25
     4a8:	8f 93       	push	r24
     4aa:	0e 94 7e 07 	call	0xefc	; 0xefc <sprintf>
	if (num<10){
     4ae:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <num>
     4b2:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <num+0x1>
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0a 97       	sbiw	r24, 0x0a	; 10
     4c4:	48 f4       	brcc	.+18     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
		LCD_String(" ");
     4c6:	8b ed       	ldi	r24, 0xDB	; 219
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
		LCD_String(text);
     4ce:	86 e0       	ldi	r24, 0x06	; 6
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     4d6:	04 c0       	rjmp	.+8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
	}
	else{
		LCD_String(text);
     4d8:	86 e0       	ldi	r24, 0x06	; 6
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	}
	LCD_String(".");
     4e0:	87 e6       	ldi	r24, 0x67	; 103
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	sprintf(text, "%d", dec);
     4e8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <dec+0x1>
     4ec:	8f 93       	push	r24
     4ee:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <dec>
     4f2:	8f 93       	push	r24
     4f4:	84 e6       	ldi	r24, 0x64	; 100
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	9f 93       	push	r25
     4fa:	8f 93       	push	r24
     4fc:	86 e0       	ldi	r24, 0x06	; 6
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	0e 94 7e 07 	call	0xefc	; 0xefc <sprintf>
	if (dec==0){
     508:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <dec>
     50c:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <dec+0x1>
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	00 97       	sbiw	r24, 0x00	; 0
     51e:	49 f4       	brne	.+18     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
		LCD_String("0");
     520:	8b e6       	ldi	r24, 0x6B	; 107
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
		LCD_String("0");
     528:	8b e6       	ldi	r24, 0x6B	; 107
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     530:	08 95       	ret
	}
	else if(dec<10){
     532:	0a 97       	sbiw	r24, 0x0a	; 10
     534:	48 f4       	brcc	.+18     	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
		LCD_String("0");
     536:	8b e6       	ldi	r24, 0x6B	; 107
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
		LCD_String(text);
     53e:	86 e0       	ldi	r24, 0x06	; 6
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     546:	08 95       	ret
	}
	else{
		LCD_String(text);
     548:	86 e0       	ldi	r24, 0x06	; 6
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     550:	08 95       	ret

00000552 <disp_an>:
	}
}

void disp_an(){
	value = ADC_Read(0);
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 ff 00 	call	0x1fe	; 0x1fe <ADC_Read>
	value = value*(5000/1023);
     558:	fc 01       	movw	r30, r24
     55a:	ee 0f       	add	r30, r30
     55c:	ff 1f       	adc	r31, r31
     55e:	ee 0f       	add	r30, r30
     560:	ff 1f       	adc	r31, r31
     562:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <value+0x1>
     566:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <value>
	desired = 40*(value/25);
     56a:	9f 01       	movw	r18, r30
     56c:	af ea       	ldi	r26, 0xAF	; 175
     56e:	b7 e4       	ldi	r27, 0x47	; 71
     570:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__umulhisi3>
     574:	af 01       	movw	r20, r30
     576:	48 1b       	sub	r20, r24
     578:	59 0b       	sbc	r21, r25
     57a:	56 95       	lsr	r21
     57c:	47 95       	ror	r20
     57e:	84 0f       	add	r24, r20
     580:	95 1f       	adc	r25, r21
     582:	92 95       	swap	r25
     584:	82 95       	swap	r24
     586:	8f 70       	andi	r24, 0x0F	; 15
     588:	89 27       	eor	r24, r25
     58a:	9f 70       	andi	r25, 0x0F	; 15
     58c:	89 27       	eor	r24, r25
     58e:	48 e2       	ldi	r20, 0x28	; 40
     590:	48 9f       	mul	r20, r24
     592:	90 01       	movw	r18, r0
     594:	49 9f       	mul	r20, r25
     596:	30 0d       	add	r19, r0
     598:	11 24       	eor	r1, r1
     59a:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__data_end+0x1>
     59e:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__data_end>
	analog = value/1000;
     5a2:	9f 01       	movw	r18, r30
     5a4:	36 95       	lsr	r19
     5a6:	27 95       	ror	r18
     5a8:	36 95       	lsr	r19
     5aa:	27 95       	ror	r18
     5ac:	36 95       	lsr	r19
     5ae:	27 95       	ror	r18
     5b0:	a5 ec       	ldi	r26, 0xC5	; 197
     5b2:	b0 e2       	ldi	r27, 0x20	; 32
     5b4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__umulhisi3>
     5b8:	92 95       	swap	r25
     5ba:	82 95       	swap	r24
     5bc:	8f 70       	andi	r24, 0x0F	; 15
     5be:	89 27       	eor	r24, r25
     5c0:	9f 70       	andi	r25, 0x0F	; 15
     5c2:	89 27       	eor	r24, r25
     5c4:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <analog+0x1>
     5c8:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <analog>
	sprintf(String1,"%d",analog);
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	84 e6       	ldi	r24, 0x64	; 100
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	9f 93       	push	r25
     5d6:	8f 93       	push	r24
     5d8:	82 e1       	ldi	r24, 0x12	; 18
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	9f 93       	push	r25
     5de:	8f 93       	push	r24
     5e0:	0e 94 7e 07 	call	0xefc	; 0xefc <sprintf>
	LCD_Command(0xC0);
     5e4:	80 ec       	ldi	r24, 0xC0	; 192
     5e6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     5ea:	84 e1       	ldi	r24, 0x14	; 20
     5ec:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     5f0:	84 e1       	ldi	r24, 0x14	; 20
     5f2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     5f6:	84 e1       	ldi	r24, 0x14	; 20
     5f8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	if (analog==0){
     5fc:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <analog>
     600:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <analog+0x1>
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
     60c:	0f 90       	pop	r0
     60e:	0f 90       	pop	r0
     610:	89 2b       	or	r24, r25
     612:	29 f4       	brne	.+10     	; 0x61e <disp_an+0xcc>
		LCD_String("0");
     614:	8b e6       	ldi	r24, 0x6B	; 107
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     61c:	04 c0       	rjmp	.+8      	; 0x626 <disp_an+0xd4>
	}
	else{
		LCD_String(String1);
     61e:	82 e1       	ldi	r24, 0x12	; 18
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	}
	LCD_String(".");
     626:	87 e6       	ldi	r24, 0x67	; 103
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	analog = value - (1000*analog);
     62e:	40 91 fa 00 	lds	r20, 0x00FA	; 0x8000fa <analog>
     632:	50 91 fb 00 	lds	r21, 0x00FB	; 0x8000fb <analog+0x1>
     636:	88 ee       	ldi	r24, 0xE8	; 232
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	48 9f       	mul	r20, r24
     63c:	90 01       	movw	r18, r0
     63e:	49 9f       	mul	r20, r25
     640:	30 0d       	add	r19, r0
     642:	58 9f       	mul	r21, r24
     644:	30 0d       	add	r19, r0
     646:	11 24       	eor	r1, r1
     648:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <value>
     64c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <value+0x1>
     650:	82 1b       	sub	r24, r18
     652:	93 0b       	sbc	r25, r19
     654:	90 93 fb 00 	sts	0x00FB, r25	; 0x8000fb <analog+0x1>
     658:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <analog>
	sprintf(String2,"%d",analog);
     65c:	9f 93       	push	r25
     65e:	8f 93       	push	r24
     660:	84 e6       	ldi	r24, 0x64	; 100
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	9f 93       	push	r25
     666:	8f 93       	push	r24
     668:	82 e0       	ldi	r24, 0x02	; 2
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	0e 94 7e 07 	call	0xefc	; 0xefc <sprintf>
	if (analog==0){
     674:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <analog>
     678:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <analog+0x1>
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	00 97       	sbiw	r24, 0x00	; 0
     68a:	29 f4       	brne	.+10     	; 0x696 <disp_an+0x144>
		LCD_String("000");
     68c:	89 e6       	ldi	r24, 0x69	; 105
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     694:	1c c0       	rjmp	.+56     	; 0x6ce <disp_an+0x17c>
	}
	else if (analog<10){
     696:	8a 30       	cpi	r24, 0x0A	; 10
     698:	91 05       	cpc	r25, r1
     69a:	48 f4       	brcc	.+18     	; 0x6ae <disp_an+0x15c>
		LCD_String("00");
     69c:	8a e6       	ldi	r24, 0x6A	; 106
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
		LCD_String(String2);
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     6ac:	10 c0       	rjmp	.+32     	; 0x6ce <disp_an+0x17c>
	}
	else if(analog<100){
     6ae:	84 36       	cpi	r24, 0x64	; 100
     6b0:	91 05       	cpc	r25, r1
     6b2:	48 f4       	brcc	.+18     	; 0x6c6 <disp_an+0x174>
		LCD_String("0");
     6b4:	8b e6       	ldi	r24, 0x6B	; 107
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
		LCD_String(String2);
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <disp_an+0x17c>
	}
	else{
		LCD_String(String2);
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	}
	analogcheck=0;
     6ce:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <analogcheck+0x1>
     6d2:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <analogcheck>
     6d6:	08 95       	ret

000006d8 <homepos>:
}

void homepos(){
	while(((PIND & (1<<PIND3))==0)&&(start>0)){
     6d8:	5b c0       	rjmp	.+182    	; 0x790 <homepos+0xb8>
		write = steps*1.0;
     6da:	60 91 f6 00 	lds	r22, 0x00F6	; 0x8000f6 <steps>
     6de:	70 91 f7 00 	lds	r23, 0x00F7	; 0x8000f7 <steps+0x1>
     6e2:	07 2e       	mov	r0, r23
     6e4:	00 0c       	add	r0, r0
     6e6:	88 0b       	sbc	r24, r24
     6e8:	99 0b       	sbc	r25, r25
     6ea:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <__floatsisf>
     6ee:	ab 01       	movw	r20, r22
     6f0:	bc 01       	movw	r22, r24
     6f2:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <write>
     6f6:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <write+0x1>
     6fa:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <write+0x2>
     6fe:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <write+0x3>
		eeprom_write_float((float *) 20, write);
     702:	84 e1       	ldi	r24, 0x14	; 20
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 37 0a 	call	0x146e	; 0x146e <eeprom_write_dword>
		steps=steps-1;
     70a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <steps>
     70e:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <steps+0x1>
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <steps+0x1>
     718:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <steps>
		if ((steps%20)==0){
     71c:	64 e1       	ldi	r22, 0x14	; 20
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	0e 94 47 07 	call	0xe8e	; 0xe8e <__divmodhi4>
     724:	89 2b       	or	r24, r25
     726:	51 f4       	brne	.+20     	; 0x73c <homepos+0x64>
			disp_dist();
     728:	0e 94 15 01 	call	0x22a	; 0x22a <disp_dist>
			if (analogmode==0){
     72c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <analogmode>
     730:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <analogmode+0x1>
     734:	89 2b       	or	r24, r25
     736:	11 f4       	brne	.+4      	; 0x73c <homepos+0x64>
				disp_av();	
     738:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <disp_av>
			}
		}
		if (PIND &(1<<PIND7)){
     73c:	87 9b       	sbis	0x10, 7	; 16
     73e:	16 c0       	rjmp	.+44     	; 0x76c <homepos+0x94>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     740:	2f ef       	ldi	r18, 0xFF	; 255
     742:	80 e7       	ldi	r24, 0x70	; 112
     744:	92 e0       	ldi	r25, 0x02	; 2
     746:	21 50       	subi	r18, 0x01	; 1
     748:	80 40       	sbci	r24, 0x00	; 0
     74a:	90 40       	sbci	r25, 0x00	; 0
     74c:	e1 f7       	brne	.-8      	; 0x746 <homepos+0x6e>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <homepos+0x78>
     750:	00 00       	nop
			_delay_ms(50);
			if (PIND&(1<<PIND7)){
     752:	87 9b       	sbis	0x10, 7	; 16
     754:	0b c0       	rjmp	.+22     	; 0x76c <homepos+0x94>
				start=0-start;
     756:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     75a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     75e:	91 95       	neg	r25
     760:	81 95       	neg	r24
     762:	91 09       	sbc	r25, r1
     764:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     768:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}
		PORTB |= (1<<PINB0);
     76c:	88 b3       	in	r24, 0x18	; 24
     76e:	81 60       	ori	r24, 0x01	; 1
     770:	88 bb       	out	0x18, r24	; 24
     772:	8f e9       	ldi	r24, 0x9F	; 159
     774:	9f e0       	ldi	r25, 0x0F	; 15
     776:	01 97       	sbiw	r24, 0x01	; 1
     778:	f1 f7       	brne	.-4      	; 0x776 <homepos+0x9e>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <homepos+0xa4>
     77c:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1<<PINB0);
     77e:	88 b3       	in	r24, 0x18	; 24
     780:	8e 7f       	andi	r24, 0xFE	; 254
     782:	88 bb       	out	0x18, r24	; 24
     784:	8f e9       	ldi	r24, 0x9F	; 159
     786:	9f e0       	ldi	r25, 0x0F	; 15
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <homepos+0xb0>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <homepos+0xb6>
     78e:	00 00       	nop
	}
	analogcheck=0;
}

void homepos(){
	while(((PIND & (1<<PIND3))==0)&&(start>0)){
     790:	83 99       	sbic	0x10, 3	; 16
     792:	08 c0       	rjmp	.+16     	; 0x7a4 <homepos+0xcc>
     794:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     798:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     79c:	18 16       	cp	r1, r24
     79e:	19 06       	cpc	r1, r25
     7a0:	0c f4       	brge	.+2      	; 0x7a4 <homepos+0xcc>
     7a2:	9b cf       	rjmp	.-202    	; 0x6da <homepos+0x2>
     7a4:	8f e3       	ldi	r24, 0x3F	; 63
     7a6:	9c e9       	ldi	r25, 0x9C	; 156
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <homepos+0xd0>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <homepos+0xd6>
     7ae:	00 00       	nop
		_delay_ms(1);
		PORTB &= ~(1<<PINB0);
		_delay_ms(1);
	}
	_delay_ms(10);
	if (((PIND & (1<<PIND3))==0)&&(start>0)){
     7b0:	83 99       	sbic	0x10, 3	; 16
     7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <homepos+0xee>
     7b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7b8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     7bc:	18 16       	cp	r1, r24
     7be:	19 06       	cpc	r1, r25
     7c0:	14 f4       	brge	.+4      	; 0x7c6 <homepos+0xee>
		homepos();
     7c2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <homepos>
	}
	steps=0;
     7c6:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <steps+0x1>
     7ca:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <steps>
     7ce:	08 95       	ret

000007d0 <go>:
}

void go(int y){
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	ec 01       	movw	r28, r24
	x=0;
     7d6:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <x+0x1>
     7da:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <x>
	while(x<y){
     7de:	59 c0       	rjmp	.+178    	; 0x892 <__stack+0x33>
		x=x+1;
     7e0:	01 96       	adiw	r24, 0x01	; 1
     7e2:	90 93 fd 00 	sts	0x00FD, r25	; 0x8000fd <x+0x1>
     7e6:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <x>
		if (PIND &(1<<PIND7)){
     7ea:	87 9b       	sbis	0x10, 7	; 16
     7ec:	16 c0       	rjmp	.+44     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7ee:	2f ef       	ldi	r18, 0xFF	; 255
     7f0:	81 ee       	ldi	r24, 0xE1	; 225
     7f2:	94 e0       	ldi	r25, 0x04	; 4
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	80 40       	sbci	r24, 0x00	; 0
     7f8:	90 40       	sbci	r25, 0x00	; 0
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <go+0x24>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <go+0x2e>
     7fe:	00 00       	nop
			_delay_ms(100);
			if (PIND&(1<<PIND7)){
     800:	87 9b       	sbis	0x10, 7	; 16
     802:	0b c0       	rjmp	.+22     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
				start=0-start;
     804:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     808:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     80c:	91 95       	neg	r25
     80e:	81 95       	neg	r24
     810:	91 09       	sbc	r25, r1
     812:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     816:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		}
		if ((steps%20)==0){
     81a:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <steps>
     81e:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <steps+0x1>
     822:	64 e1       	ldi	r22, 0x14	; 20
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	0e 94 47 07 	call	0xe8e	; 0xe8e <__divmodhi4>
     82a:	89 2b       	or	r24, r25
     82c:	51 f4       	brne	.+20     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
			disp_dist();
     82e:	0e 94 15 01 	call	0x22a	; 0x22a <disp_dist>
			if (analogmode==0){
     832:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <analogmode>
     836:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <analogmode+0x1>
     83a:	89 2b       	or	r24, r25
     83c:	11 f4       	brne	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
				disp_av();
     83e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <disp_av>
			}
		}
		if (start>0){
     842:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     846:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     84a:	18 16       	cp	r1, r24
     84c:	19 06       	cpc	r1, r25
     84e:	0c f5       	brge	.+66     	; 0x892 <__stack+0x33>
			steps = steps+(1*dir);
     850:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <steps>
     854:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <steps+0x1>
     858:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <dir>
     85c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <dir+0x1>
     860:	82 0f       	add	r24, r18
     862:	93 1f       	adc	r25, r19
     864:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <steps+0x1>
     868:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <steps>
			PORTB ^= (1<<PINB0);
     86c:	98 b3       	in	r25, 0x18	; 24
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	98 27       	eor	r25, r24
     872:	98 bb       	out	0x18, r25	; 24
     874:	ef e5       	ldi	r30, 0x5F	; 95
     876:	fa ee       	ldi	r31, 0xEA	; 234
     878:	31 97       	sbiw	r30, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <__stack+0x19>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <__stack+0x1f>
     87e:	00 00       	nop
			_delay_ms(15);
			PORTB ^= (1<<PINB0);
     880:	98 b3       	in	r25, 0x18	; 24
     882:	89 27       	eor	r24, r25
     884:	88 bb       	out	0x18, r24	; 24
     886:	8f e5       	ldi	r24, 0x5F	; 95
     888:	9a ee       	ldi	r25, 0xEA	; 234
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <__stack+0x2b>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
     890:	00 00       	nop
	steps=0;
}

void go(int y){
	x=0;
	while(x<y){
     892:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <x>
     896:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <x+0x1>
     89a:	8c 17       	cp	r24, r28
     89c:	9d 07       	cpc	r25, r29
     89e:	0c f4       	brge	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	9f cf       	rjmp	.-194    	; 0x7e0 <go+0x10>
			_delay_ms(15);
			PORTB ^= (1<<PINB0);
			_delay_ms(15);
		}
	}
}
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <comphome>:

void comphome(){
	LCD_Command(0x80);
     8a8:	80 e8       	ldi	r24, 0x80	; 128
     8aa:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String("Homing       ");
     8ae:	8d e6       	ldi	r24, 0x6D	; 109
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	PORTB &= ~(1<<PINB4);
     8b6:	88 b3       	in	r24, 0x18	; 24
     8b8:	8f 7e       	andi	r24, 0xEF	; 239
     8ba:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~(1<<PINB1);
     8bc:	88 b3       	in	r24, 0x18	; 24
     8be:	8d 7f       	andi	r24, 0xFD	; 253
     8c0:	88 bb       	out	0x18, r24	; 24
	homepos();
     8c2:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <homepos>
	PORTB |= (1<<PINB1);
     8c6:	88 b3       	in	r24, 0x18	; 24
     8c8:	82 60       	ori	r24, 0x02	; 2
     8ca:	88 bb       	out	0x18, r24	; 24
	y=333;
     8cc:	8d e4       	ldi	r24, 0x4D	; 77
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <y+0x1>
     8d4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <y>
	go(y);
     8d8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <go>
	LCD_Command(0x80);
     8dc:	80 e8       	ldi	r24, 0x80	; 128
     8de:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String("Trigger On");
     8e2:	8b e7       	ldi	r24, 0x7B	; 123
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	PORTB |= (1<<PINB4);
     8ea:	88 b3       	in	r24, 0x18	; 24
     8ec:	80 61       	ori	r24, 0x10	; 16
     8ee:	88 bb       	out	0x18, r24	; 24
	steps=y;
     8f0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <y>
     8f4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <y+0x1>
     8f8:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <steps+0x1>
     8fc:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <steps>
     900:	08 95       	ret

00000902 <main>:
}

int main(void)
{	
	write = eeprom_read_float((float *) 20);
     902:	84 e1       	ldi	r24, 0x14	; 20
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 31 0a 	call	0x1462	; 0x1462 <eeprom_read_dword>
     90a:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <write>
     90e:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <write+0x1>
     912:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <write+0x2>
     916:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <write+0x3>
	steps = write/1;
     91a:	0e 94 ab 06 	call	0xd56	; 0xd56 <__fixsfsi>
     91e:	70 93 f7 00 	sts	0x00F7, r23	; 0x8000f7 <steps+0x1>
     922:	60 93 f6 00 	sts	0x00F6, r22	; 0x8000f6 <steps>
	if (steps<=0){
     926:	16 16       	cp	r1, r22
     928:	17 06       	cpc	r1, r23
     92a:	8c f0       	brlt	.+34     	; 0x94e <main+0x4c>
		steps=0;
     92c:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <steps+0x1>
     930:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <steps>
		dist = 0;
     934:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <dist+0x1>
     938:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <dist>
		dec = 0;
     93c:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <dec+0x1>
     940:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <dec>
		num = 0;
     944:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <num+0x1>
     948:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <num>
     94c:	31 c0       	rjmp	.+98     	; 0x9b0 <main+0xae>
	}
	else{
		dist = 15*(steps/20);
     94e:	cb 01       	movw	r24, r22
     950:	64 e1       	ldi	r22, 0x14	; 20
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	0e 94 47 07 	call	0xe8e	; 0xe8e <__divmodhi4>
     958:	8f e0       	ldi	r24, 0x0F	; 15
     95a:	86 9f       	mul	r24, r22
     95c:	a0 01       	movw	r20, r0
     95e:	87 9f       	mul	r24, r23
     960:	50 0d       	add	r21, r0
     962:	11 24       	eor	r1, r1
     964:	50 93 f5 00 	sts	0x00F5, r21	; 0x8000f5 <dist+0x1>
     968:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <dist>
		dec = dist%100;
     96c:	fa 01       	movw	r30, r20
     96e:	f6 95       	lsr	r31
     970:	e7 95       	ror	r30
     972:	f6 95       	lsr	r31
     974:	e7 95       	ror	r30
     976:	9f 01       	movw	r18, r30
     978:	ab e7       	ldi	r26, 0x7B	; 123
     97a:	b4 e1       	ldi	r27, 0x14	; 20
     97c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__umulhisi3>
     980:	96 95       	lsr	r25
     982:	87 95       	ror	r24
     984:	64 e6       	ldi	r22, 0x64	; 100
     986:	68 9f       	mul	r22, r24
     988:	90 01       	movw	r18, r0
     98a:	69 9f       	mul	r22, r25
     98c:	30 0d       	add	r19, r0
     98e:	11 24       	eor	r1, r1
     990:	ca 01       	movw	r24, r20
     992:	82 1b       	sub	r24, r18
     994:	93 0b       	sbc	r25, r19
     996:	90 93 f3 00 	sts	0x00F3, r25	; 0x8000f3 <dec+0x1>
     99a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <dec>
		num = dist/100;
     99e:	9f 01       	movw	r18, r30
     9a0:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__umulhisi3>
     9a4:	96 95       	lsr	r25
     9a6:	87 95       	ror	r24
     9a8:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <num+0x1>
     9ac:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <num>
	}
	ADC_Init();
     9b0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <ADC_Init>
	MCUCSR |=(1<<JTD);
     9b4:	84 b7       	in	r24, 0x34	; 52
     9b6:	80 68       	ori	r24, 0x80	; 128
     9b8:	84 bf       	out	0x34, r24	; 52
	MCUCSR |=(1<<JTD);
     9ba:	84 b7       	in	r24, 0x34	; 52
     9bc:	80 68       	ori	r24, 0x80	; 128
     9be:	84 bf       	out	0x34, r24	; 52
	DDRB |= 0b00010011;
     9c0:	87 b3       	in	r24, 0x17	; 23
     9c2:	83 61       	ori	r24, 0x13	; 19
     9c4:	87 bb       	out	0x17, r24	; 23
	DDRD |= 0b00000000;
     9c6:	81 b3       	in	r24, 0x11	; 17
     9c8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0b11111111;
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	82 bb       	out	0x12, r24	; 18
	LCD_Init();		
     9ce:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Init>
	LCD_Command(0x80);
     9d2:	80 e8       	ldi	r24, 0x80	; 128
     9d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String("Trigger On");	
     9d8:	8b e7       	ldi	r24, 0x7B	; 123
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	LCD_Command(0xC0);
     9e0:	80 ec       	ldi	r24, 0xC0	; 192
     9e2:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String("AV:     kV");
     9e6:	86 e8       	ldi	r24, 0x86	; 134
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	LCD_Command(0x90);
     9ee:	80 e9       	ldi	r24, 0x90	; 144
     9f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String("Distance:");
     9f4:	81 e9       	ldi	r24, 0x91	; 145
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	LCD_Command(0x14);
     9fc:	84 e1       	ldi	r24, 0x14	; 20
     9fe:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     a02:	84 e1       	ldi	r24, 0x14	; 20
     a04:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String(".");
     a08:	87 e6       	ldi	r24, 0x67	; 103
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	LCD_Command(0x14);
     a10:	84 e1       	ldi	r24, 0x14	; 20
     a12:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_Command(0x14);
     a16:	84 e1       	ldi	r24, 0x14	; 20
     a18:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	LCD_String("mm");
     a1c:	8b e9       	ldi	r24, 0x9B	; 155
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
	LCD_Command(0xD0);
     a24:	80 ed       	ldi	r24, 0xD0	; 208
     a26:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
	if (PINB&(1<<PINB3)){
     a2a:	b3 9b       	sbis	0x16, 3	; 22
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <main+0x136>
		LCD_String("Mode:Remote ");		
     a2e:	8e e9       	ldi	r24, 0x9E	; 158
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
     a36:	dd c0       	rjmp	.+442    	; 0xbf2 <main+0x2f0>
	}
	else{
		LCD_String("Mode:Local ");
     a38:	8b ea       	ldi	r24, 0xAB	; 171
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
		comphome();
     a40:	0e 94 54 04 	call	0x8a8	; 0x8a8 <comphome>
     a44:	d6 c0       	rjmp	.+428    	; 0xbf2 <main+0x2f0>
	}
	while (1)
    {
		while (analogmode==0){
			if (PIND &(1<<PIND7)){
     a46:	87 9b       	sbis	0x10, 7	; 16
     a48:	14 c0       	rjmp	.+40     	; 0xa72 <main+0x170>
				start=0-start;
     a4a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a4e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a52:	91 95       	neg	r25
     a54:	81 95       	neg	r24
     a56:	91 09       	sbc	r25, r1
     a58:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     a5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     a60:	2f ef       	ldi	r18, 0xFF	; 255
     a62:	89 e6       	ldi	r24, 0x69	; 105
     a64:	98 e1       	ldi	r25, 0x18	; 24
     a66:	21 50       	subi	r18, 0x01	; 1
     a68:	80 40       	sbci	r24, 0x00	; 0
     a6a:	90 40       	sbci	r25, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <main+0x164>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <main+0x16e>
     a70:	00 00       	nop
				_delay_ms(500);
			}
			if (PINB & (1<<PINB3)){
     a72:	b3 9b       	sbis	0x16, 3	; 22
     a74:	21 c0       	rjmp	.+66     	; 0xab8 <main+0x1b6>
				analogmode=1;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <analogmode+0x1>
     a7e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <analogmode>
     a82:	2f ef       	ldi	r18, 0xFF	; 255
     a84:	89 e6       	ldi	r24, 0x69	; 105
     a86:	98 e1       	ldi	r25, 0x18	; 24
     a88:	21 50       	subi	r18, 0x01	; 1
     a8a:	80 40       	sbci	r24, 0x00	; 0
     a8c:	90 40       	sbci	r25, 0x00	; 0
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <main+0x186>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <main+0x190>
     a92:	00 00       	nop
				_delay_ms(500);
				LCD_Command(0xC0);
     a94:	80 ec       	ldi	r24, 0xC0	; 192
     a96:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("AV:     V ");
     a9a:	87 eb       	ldi	r24, 0xB7	; 183
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
				LCD_Command(0xD0);
     aa2:	80 ed       	ldi	r24, 0xD0	; 208
     aa4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("Mode:Remote   ");
     aa8:	82 ec       	ldi	r24, 0xC2	; 194
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
				disp_an();
     ab0:	0e 94 a9 02 	call	0x552	; 0x552 <disp_an>
				comphome();
     ab4:	0e 94 54 04 	call	0x8a8	; 0x8a8 <comphome>
			}
			if ((steps%20)==0){
     ab8:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <steps>
     abc:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <steps+0x1>
     ac0:	64 e1       	ldi	r22, 0x14	; 20
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	0e 94 47 07 	call	0xe8e	; 0xe8e <__divmodhi4>
     ac8:	89 2b       	or	r24, r25
     aca:	21 f4       	brne	.+8      	; 0xad4 <main+0x1d2>
				disp_dist();
     acc:	0e 94 15 01 	call	0x22a	; 0x22a <disp_dist>
				disp_av();
     ad0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <disp_av>
			}
			if (PIND & (1<<PIND3)){
     ad4:	83 9b       	sbis	0x10, 3	; 16
     ad6:	0c c0       	rjmp	.+24     	; 0xaf0 <main+0x1ee>
     ad8:	8f e3       	ldi	r24, 0x3F	; 63
     ada:	9c e9       	ldi	r25, 0x9C	; 156
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	f1 f7       	brne	.-4      	; 0xadc <main+0x1da>
     ae0:	00 c0       	rjmp	.+0      	; 0xae2 <main+0x1e0>
     ae2:	00 00       	nop
				_delay_ms(10);
				if (PIND & (1<<PIND3)){	
     ae4:	83 9b       	sbis	0x10, 3	; 16
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <main+0x1ee>
					steps=0;
     ae8:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <steps+0x1>
     aec:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <steps>
				}
			}
			if (PIND & (1<<PIND2)){
     af0:	82 9b       	sbis	0x10, 2	; 16
     af2:	0e c0       	rjmp	.+28     	; 0xb10 <main+0x20e>
     af4:	8f e3       	ldi	r24, 0x3F	; 63
     af6:	9c e9       	ldi	r25, 0x9C	; 156
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <main+0x1f6>
     afc:	00 c0       	rjmp	.+0      	; 0xafe <main+0x1fc>
     afe:	00 00       	nop
				_delay_ms(10);
				if (PIND & (1<<PIND2)){
     b00:	82 9b       	sbis	0x10, 2	; 16
     b02:	06 c0       	rjmp	.+12     	; 0xb10 <main+0x20e>
					steps=8000;
     b04:	80 e4       	ldi	r24, 0x40	; 64
     b06:	9f e1       	ldi	r25, 0x1F	; 31
     b08:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <steps+0x1>
     b0c:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <steps>
				}
			}
			if (PIND & (1<<PIND4)){
     b10:	84 9b       	sbis	0x10, 4	; 16
     b12:	34 c0       	rjmp	.+104    	; 0xb7c <main+0x27a>
				LCD_Command(0x80);
     b14:	80 e8       	ldi	r24, 0x80	; 128
     b16:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("           ");
     b1a:	81 ed       	ldi	r24, 0xD1	; 209
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
				PORTB &= ~(1<<PINB4);
     b22:	88 b3       	in	r24, 0x18	; 24
     b24:	8f 7e       	andi	r24, 0xEF	; 239
     b26:	88 bb       	out	0x18, r24	; 24
				if (PIND & (1<<PIND3)){
     b28:	83 9b       	sbis	0x10, 3	; 16
     b2a:	0d c0       	rjmp	.+26     	; 0xb46 <main+0x244>
     b2c:	8f e3       	ldi	r24, 0x3F	; 63
     b2e:	9c e9       	ldi	r25, 0x9C	; 156
     b30:	01 97       	sbiw	r24, 0x01	; 1
     b32:	f1 f7       	brne	.-4      	; 0xb30 <main+0x22e>
     b34:	00 c0       	rjmp	.+0      	; 0xb36 <main+0x234>
     b36:	00 00       	nop
					_delay_ms(10);
					if (PIND & (1<<PIND3)){
     b38:	83 9b       	sbis	0x10, 3	; 16
     b3a:	16 c0       	rjmp	.+44     	; 0xb68 <main+0x266>
						steps=0;
     b3c:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <steps+0x1>
     b40:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <steps>
     b44:	11 c0       	rjmp	.+34     	; 0xb68 <main+0x266>
					}
				}
				else{
					dir=1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <dir+0x1>
     b4e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
					PORTB |= (1<<PINB1);
     b52:	88 b3       	in	r24, 0x18	; 24
     b54:	82 60       	ori	r24, 0x02	; 2
     b56:	88 bb       	out	0x18, r24	; 24
					y=20;
     b58:	84 e1       	ldi	r24, 0x14	; 20
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <y+0x1>
     b60:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <y>
					go(y);
     b64:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <go>
				}
				LCD_Command(0x80);
     b68:	80 e8       	ldi	r24, 0x80	; 128
     b6a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("Trigger On");
     b6e:	8b e7       	ldi	r24, 0x7B	; 123
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
				PORTB |= (1<<PINB4);
     b76:	88 b3       	in	r24, 0x18	; 24
     b78:	80 61       	ori	r24, 0x10	; 16
     b7a:	88 bb       	out	0x18, r24	; 24
			}
			if (PIND & (1<<PIND5)){
     b7c:	85 9b       	sbis	0x10, 5	; 16
     b7e:	36 c0       	rjmp	.+108    	; 0xbec <main+0x2ea>
				LCD_Command(0x80);
     b80:	80 e8       	ldi	r24, 0x80	; 128
     b82:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("           ");
     b86:	81 ed       	ldi	r24, 0xD1	; 209
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
				PORTB &= ~(1<<PINB4);
     b8e:	88 b3       	in	r24, 0x18	; 24
     b90:	8f 7e       	andi	r24, 0xEF	; 239
     b92:	88 bb       	out	0x18, r24	; 24
				if(PIND & (1<<PIND2)){
     b94:	82 9b       	sbis	0x10, 2	; 16
     b96:	0f c0       	rjmp	.+30     	; 0xbb6 <main+0x2b4>
     b98:	8f e3       	ldi	r24, 0x3F	; 63
     b9a:	9c e9       	ldi	r25, 0x9C	; 156
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	f1 f7       	brne	.-4      	; 0xb9c <main+0x29a>
     ba0:	00 c0       	rjmp	.+0      	; 0xba2 <main+0x2a0>
     ba2:	00 00       	nop
					_delay_ms(10);
					if (PIND & (1<<PIND2)){
     ba4:	82 9b       	sbis	0x10, 2	; 16
     ba6:	18 c0       	rjmp	.+48     	; 0xbd8 <main+0x2d6>
						steps=8000;	
     ba8:	80 e4       	ldi	r24, 0x40	; 64
     baa:	9f e1       	ldi	r25, 0x1F	; 31
     bac:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <steps+0x1>
     bb0:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <steps>
     bb4:	11 c0       	rjmp	.+34     	; 0xbd8 <main+0x2d6>
					}
				}
				else{
					dir=-1;
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	9f ef       	ldi	r25, 0xFF	; 255
     bba:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <dir+0x1>
     bbe:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
					PORTB &= ~(1<<PINB1);
     bc2:	88 b3       	in	r24, 0x18	; 24
     bc4:	8d 7f       	andi	r24, 0xFD	; 253
     bc6:	88 bb       	out	0x18, r24	; 24
					y=20;
     bc8:	84 e1       	ldi	r24, 0x14	; 20
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <y+0x1>
     bd0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <y>
					go(y);
     bd4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <go>
				}
				LCD_Command(0x80);
     bd8:	80 e8       	ldi	r24, 0x80	; 128
     bda:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("Trigger On");
     bde:	8b e7       	ldi	r24, 0x7B	; 123
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
				PORTB |= (1<<PINB4);
     be6:	88 b3       	in	r24, 0x18	; 24
     be8:	80 61       	ori	r24, 0x10	; 16
     bea:	88 bb       	out	0x18, r24	; 24
			}
			if (PIND & (1<<PIND1)){
     bec:	81 99       	sbic	0x10, 1	; 16
				comphome();
     bee:	0e 94 54 04 	call	0x8a8	; 0x8a8 <comphome>
		LCD_String("Mode:Local ");
		comphome();
	}
	while (1)
    {
		while (analogmode==0){
     bf2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <analogmode>
     bf6:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <analogmode+0x1>
     bfa:	89 2b       	or	r24, r25
     bfc:	09 f4       	brne	.+2      	; 0xc00 <main+0x2fe>
     bfe:	23 cf       	rjmp	.-442    	; 0xa46 <main+0x144>
     c00:	a2 c0       	rjmp	.+324    	; 0xd46 <main+0x444>
				comphome();
			}
		}
		
		while (analogmode==1){
			if (PIND &(1<<PIND7)){
     c02:	87 9b       	sbis	0x10, 7	; 16
     c04:	14 c0       	rjmp	.+40     	; 0xc2e <main+0x32c>
				start=0-start;
     c06:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c0a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c0e:	91 95       	neg	r25
     c10:	81 95       	neg	r24
     c12:	91 09       	sbc	r25, r1
     c14:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     c18:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     c1c:	9f ef       	ldi	r25, 0xFF	; 255
     c1e:	29 e6       	ldi	r18, 0x69	; 105
     c20:	88 e1       	ldi	r24, 0x18	; 24
     c22:	91 50       	subi	r25, 0x01	; 1
     c24:	20 40       	sbci	r18, 0x00	; 0
     c26:	80 40       	sbci	r24, 0x00	; 0
     c28:	e1 f7       	brne	.-8      	; 0xc22 <main+0x320>
     c2a:	00 c0       	rjmp	.+0      	; 0xc2c <main+0x32a>
     c2c:	00 00       	nop
				_delay_ms(500);
			}
			if (PINB & (1<<PINB2)){
     c2e:	b2 9b       	sbis	0x16, 2	; 22
     c30:	1d c0       	rjmp	.+58     	; 0xc6c <main+0x36a>
     c32:	9f ef       	ldi	r25, 0xFF	; 255
     c34:	29 e6       	ldi	r18, 0x69	; 105
     c36:	88 e1       	ldi	r24, 0x18	; 24
     c38:	91 50       	subi	r25, 0x01	; 1
     c3a:	20 40       	sbci	r18, 0x00	; 0
     c3c:	80 40       	sbci	r24, 0x00	; 0
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <main+0x336>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <main+0x340>
     c42:	00 00       	nop
				_delay_ms(500);
				LCD_Command(0xC0);
     c44:	80 ec       	ldi	r24, 0xC0	; 192
     c46:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("AV:     kV");
     c4a:	86 e8       	ldi	r24, 0x86	; 134
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
				LCD_Command(0xD0);
     c52:	80 ed       	ldi	r24, 0xD0	; 208
     c54:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("Mode:Local    ");
     c58:	8d ed       	ldi	r24, 0xDD	; 221
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
				analogmode=0;
     c60:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <analogmode+0x1>
     c64:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <analogmode>
				comphome();
     c68:	0e 94 54 04 	call	0x8a8	; 0x8a8 <comphome>
			}
			if ((steps%20)==0){
     c6c:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <steps>
     c70:	90 91 f7 00 	lds	r25, 0x00F7	; 0x8000f7 <steps+0x1>
     c74:	64 e1       	ldi	r22, 0x14	; 20
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	0e 94 47 07 	call	0xe8e	; 0xe8e <__divmodhi4>
     c7c:	89 2b       	or	r24, r25
     c7e:	61 f4       	brne	.+24     	; 0xc98 <main+0x396>
				disp_dist();
     c80:	0e 94 15 01 	call	0x22a	; 0x22a <disp_dist>
				LCD_Command(0x80);
     c84:	80 e8       	ldi	r24, 0x80	; 128
     c86:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("           ");
     c8a:	81 ed       	ldi	r24, 0xD1	; 209
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
				PORTB &= ~(1<<PINB4);
     c92:	88 b3       	in	r24, 0x18	; 24
     c94:	8f 7e       	andi	r24, 0xEF	; 239
     c96:	88 bb       	out	0x18, r24	; 24
			}
			if (analogcheck>20){
     c98:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <analogcheck>
     c9c:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <analogcheck+0x1>
     ca0:	45 97       	sbiw	r24, 0x15	; 21
     ca2:	10 f0       	brcs	.+4      	; 0xca8 <main+0x3a6>
				disp_an();
     ca4:	0e 94 a9 02 	call	0x552	; 0x552 <disp_an>
			}
			analogcheck=analogcheck+1;
     ca8:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <analogcheck>
     cac:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <analogcheck+0x1>
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <analogcheck+0x1>
     cb6:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <analogcheck>
			starta=1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <starta+0x1>
     cc2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <starta>
			if (steps>desired){
     cc6:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <steps>
     cca:	30 91 f7 00 	lds	r19, 0x00F7	; 0x8000f7 <steps+0x1>
     cce:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__data_end>
     cd2:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <__data_end+0x1>
     cd6:	82 17       	cp	r24, r18
     cd8:	93 07       	cpc	r25, r19
     cda:	50 f4       	brcc	.+20     	; 0xcf0 <main+0x3ee>
				PORTB &= ~(1<<PINB1);
     cdc:	88 b3       	in	r24, 0x18	; 24
     cde:	8d 7f       	andi	r24, 0xFD	; 253
     ce0:	88 bb       	out	0x18, r24	; 24
				dir=-1;
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	9f ef       	ldi	r25, 0xFF	; 255
     ce6:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <dir+0x1>
     cea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
     cee:	1d c0       	rjmp	.+58     	; 0xd2a <main+0x428>
			}
			else if (steps<desired){
     cf0:	28 17       	cp	r18, r24
     cf2:	39 07       	cpc	r19, r25
     cf4:	50 f4       	brcc	.+20     	; 0xd0a <main+0x408>
				PORTB |= (1<<PINB1);
     cf6:	88 b3       	in	r24, 0x18	; 24
     cf8:	82 60       	ori	r24, 0x02	; 2
     cfa:	88 bb       	out	0x18, r24	; 24
				dir=1;
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <dir+0x1>
     d04:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <dir>
     d08:	10 c0       	rjmp	.+32     	; 0xd2a <main+0x428>
			}
			else{
				starta=-1;
     d0a:	8f ef       	ldi	r24, 0xFF	; 255
     d0c:	9f ef       	ldi	r25, 0xFF	; 255
     d0e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <starta+0x1>
     d12:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <starta>
				LCD_Command(0x80);
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("Trigger On");
     d1c:	8b e7       	ldi	r24, 0x7B	; 123
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LCD_String>
				PORTB |= (1<<PINB4);
     d24:	88 b3       	in	r24, 0x18	; 24
     d26:	80 61       	ori	r24, 0x10	; 16
     d28:	88 bb       	out	0x18, r24	; 24
			}
			if (starta==1){
     d2a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <starta>
     d2e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <starta+0x1>
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	41 f4       	brne	.+16     	; 0xd46 <main+0x444>
				y=1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <y+0x1>
     d3e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <y>
				go(1);
     d42:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <go>
			if (PIND & (1<<PIND1)){
				comphome();
			}
		}
		
		while (analogmode==1){
     d46:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <analogmode>
     d4a:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <analogmode+0x1>
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	09 f4       	brne	.+2      	; 0xd54 <main+0x452>
     d52:	57 cf       	rjmp	.-338    	; 0xc02 <main+0x300>
     d54:	4e cf       	rjmp	.-356    	; 0xbf2 <main+0x2f0>

00000d56 <__fixsfsi>:
     d56:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fixunssfsi>
     d5a:	68 94       	set
     d5c:	b1 11       	cpse	r27, r1
     d5e:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__fp_szero>
     d62:	08 95       	ret

00000d64 <__fixunssfsi>:
     d64:	0e 94 26 07 	call	0xe4c	; 0xe4c <__fp_splitA>
     d68:	88 f0       	brcs	.+34     	; 0xd8c <__fixunssfsi+0x28>
     d6a:	9f 57       	subi	r25, 0x7F	; 127
     d6c:	98 f0       	brcs	.+38     	; 0xd94 <__fixunssfsi+0x30>
     d6e:	b9 2f       	mov	r27, r25
     d70:	99 27       	eor	r25, r25
     d72:	b7 51       	subi	r27, 0x17	; 23
     d74:	b0 f0       	brcs	.+44     	; 0xda2 <__fixunssfsi+0x3e>
     d76:	e1 f0       	breq	.+56     	; 0xdb0 <__fixunssfsi+0x4c>
     d78:	66 0f       	add	r22, r22
     d7a:	77 1f       	adc	r23, r23
     d7c:	88 1f       	adc	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	1a f0       	brmi	.+6      	; 0xd88 <__fixunssfsi+0x24>
     d82:	ba 95       	dec	r27
     d84:	c9 f7       	brne	.-14     	; 0xd78 <__fixunssfsi+0x14>
     d86:	14 c0       	rjmp	.+40     	; 0xdb0 <__fixunssfsi+0x4c>
     d88:	b1 30       	cpi	r27, 0x01	; 1
     d8a:	91 f0       	breq	.+36     	; 0xdb0 <__fixunssfsi+0x4c>
     d8c:	0e 94 40 07 	call	0xe80	; 0xe80 <__fp_zero>
     d90:	b1 e0       	ldi	r27, 0x01	; 1
     d92:	08 95       	ret
     d94:	0c 94 40 07 	jmp	0xe80	; 0xe80 <__fp_zero>
     d98:	67 2f       	mov	r22, r23
     d9a:	78 2f       	mov	r23, r24
     d9c:	88 27       	eor	r24, r24
     d9e:	b8 5f       	subi	r27, 0xF8	; 248
     da0:	39 f0       	breq	.+14     	; 0xdb0 <__fixunssfsi+0x4c>
     da2:	b9 3f       	cpi	r27, 0xF9	; 249
     da4:	cc f3       	brlt	.-14     	; 0xd98 <__fixunssfsi+0x34>
     da6:	86 95       	lsr	r24
     da8:	77 95       	ror	r23
     daa:	67 95       	ror	r22
     dac:	b3 95       	inc	r27
     dae:	d9 f7       	brne	.-10     	; 0xda6 <__fixunssfsi+0x42>
     db0:	3e f4       	brtc	.+14     	; 0xdc0 <__fixunssfsi+0x5c>
     db2:	90 95       	com	r25
     db4:	80 95       	com	r24
     db6:	70 95       	com	r23
     db8:	61 95       	neg	r22
     dba:	7f 4f       	sbci	r23, 0xFF	; 255
     dbc:	8f 4f       	sbci	r24, 0xFF	; 255
     dbe:	9f 4f       	sbci	r25, 0xFF	; 255
     dc0:	08 95       	ret

00000dc2 <__floatunsisf>:
     dc2:	e8 94       	clt
     dc4:	09 c0       	rjmp	.+18     	; 0xdd8 <__floatsisf+0x12>

00000dc6 <__floatsisf>:
     dc6:	97 fb       	bst	r25, 7
     dc8:	3e f4       	brtc	.+14     	; 0xdd8 <__floatsisf+0x12>
     dca:	90 95       	com	r25
     dcc:	80 95       	com	r24
     dce:	70 95       	com	r23
     dd0:	61 95       	neg	r22
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	8f 4f       	sbci	r24, 0xFF	; 255
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	99 23       	and	r25, r25
     dda:	a9 f0       	breq	.+42     	; 0xe06 <__floatsisf+0x40>
     ddc:	f9 2f       	mov	r31, r25
     dde:	96 e9       	ldi	r25, 0x96	; 150
     de0:	bb 27       	eor	r27, r27
     de2:	93 95       	inc	r25
     de4:	f6 95       	lsr	r31
     de6:	87 95       	ror	r24
     de8:	77 95       	ror	r23
     dea:	67 95       	ror	r22
     dec:	b7 95       	ror	r27
     dee:	f1 11       	cpse	r31, r1
     df0:	f8 cf       	rjmp	.-16     	; 0xde2 <__floatsisf+0x1c>
     df2:	fa f4       	brpl	.+62     	; 0xe32 <__floatsisf+0x6c>
     df4:	bb 0f       	add	r27, r27
     df6:	11 f4       	brne	.+4      	; 0xdfc <__floatsisf+0x36>
     df8:	60 ff       	sbrs	r22, 0
     dfa:	1b c0       	rjmp	.+54     	; 0xe32 <__floatsisf+0x6c>
     dfc:	6f 5f       	subi	r22, 0xFF	; 255
     dfe:	7f 4f       	sbci	r23, 0xFF	; 255
     e00:	8f 4f       	sbci	r24, 0xFF	; 255
     e02:	9f 4f       	sbci	r25, 0xFF	; 255
     e04:	16 c0       	rjmp	.+44     	; 0xe32 <__floatsisf+0x6c>
     e06:	88 23       	and	r24, r24
     e08:	11 f0       	breq	.+4      	; 0xe0e <__floatsisf+0x48>
     e0a:	96 e9       	ldi	r25, 0x96	; 150
     e0c:	11 c0       	rjmp	.+34     	; 0xe30 <__floatsisf+0x6a>
     e0e:	77 23       	and	r23, r23
     e10:	21 f0       	breq	.+8      	; 0xe1a <__floatsisf+0x54>
     e12:	9e e8       	ldi	r25, 0x8E	; 142
     e14:	87 2f       	mov	r24, r23
     e16:	76 2f       	mov	r23, r22
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <__floatsisf+0x5e>
     e1a:	66 23       	and	r22, r22
     e1c:	71 f0       	breq	.+28     	; 0xe3a <__floatsisf+0x74>
     e1e:	96 e8       	ldi	r25, 0x86	; 134
     e20:	86 2f       	mov	r24, r22
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	2a f0       	brmi	.+10     	; 0xe32 <__floatsisf+0x6c>
     e28:	9a 95       	dec	r25
     e2a:	66 0f       	add	r22, r22
     e2c:	77 1f       	adc	r23, r23
     e2e:	88 1f       	adc	r24, r24
     e30:	da f7       	brpl	.-10     	; 0xe28 <__floatsisf+0x62>
     e32:	88 0f       	add	r24, r24
     e34:	96 95       	lsr	r25
     e36:	87 95       	ror	r24
     e38:	97 f9       	bld	r25, 7
     e3a:	08 95       	ret

00000e3c <__fp_split3>:
     e3c:	57 fd       	sbrc	r21, 7
     e3e:	90 58       	subi	r25, 0x80	; 128
     e40:	44 0f       	add	r20, r20
     e42:	55 1f       	adc	r21, r21
     e44:	59 f0       	breq	.+22     	; 0xe5c <__fp_splitA+0x10>
     e46:	5f 3f       	cpi	r21, 0xFF	; 255
     e48:	71 f0       	breq	.+28     	; 0xe66 <__fp_splitA+0x1a>
     e4a:	47 95       	ror	r20

00000e4c <__fp_splitA>:
     e4c:	88 0f       	add	r24, r24
     e4e:	97 fb       	bst	r25, 7
     e50:	99 1f       	adc	r25, r25
     e52:	61 f0       	breq	.+24     	; 0xe6c <__fp_splitA+0x20>
     e54:	9f 3f       	cpi	r25, 0xFF	; 255
     e56:	79 f0       	breq	.+30     	; 0xe76 <__fp_splitA+0x2a>
     e58:	87 95       	ror	r24
     e5a:	08 95       	ret
     e5c:	12 16       	cp	r1, r18
     e5e:	13 06       	cpc	r1, r19
     e60:	14 06       	cpc	r1, r20
     e62:	55 1f       	adc	r21, r21
     e64:	f2 cf       	rjmp	.-28     	; 0xe4a <__fp_split3+0xe>
     e66:	46 95       	lsr	r20
     e68:	f1 df       	rcall	.-30     	; 0xe4c <__fp_splitA>
     e6a:	08 c0       	rjmp	.+16     	; 0xe7c <__fp_splitA+0x30>
     e6c:	16 16       	cp	r1, r22
     e6e:	17 06       	cpc	r1, r23
     e70:	18 06       	cpc	r1, r24
     e72:	99 1f       	adc	r25, r25
     e74:	f1 cf       	rjmp	.-30     	; 0xe58 <__fp_splitA+0xc>
     e76:	86 95       	lsr	r24
     e78:	71 05       	cpc	r23, r1
     e7a:	61 05       	cpc	r22, r1
     e7c:	08 94       	sec
     e7e:	08 95       	ret

00000e80 <__fp_zero>:
     e80:	e8 94       	clt

00000e82 <__fp_szero>:
     e82:	bb 27       	eor	r27, r27
     e84:	66 27       	eor	r22, r22
     e86:	77 27       	eor	r23, r23
     e88:	cb 01       	movw	r24, r22
     e8a:	97 f9       	bld	r25, 7
     e8c:	08 95       	ret

00000e8e <__divmodhi4>:
     e8e:	97 fb       	bst	r25, 7
     e90:	07 2e       	mov	r0, r23
     e92:	16 f4       	brtc	.+4      	; 0xe98 <__divmodhi4+0xa>
     e94:	00 94       	com	r0
     e96:	07 d0       	rcall	.+14     	; 0xea6 <__divmodhi4_neg1>
     e98:	77 fd       	sbrc	r23, 7
     e9a:	09 d0       	rcall	.+18     	; 0xeae <__divmodhi4_neg2>
     e9c:	0e 94 6a 07 	call	0xed4	; 0xed4 <__udivmodhi4>
     ea0:	07 fc       	sbrc	r0, 7
     ea2:	05 d0       	rcall	.+10     	; 0xeae <__divmodhi4_neg2>
     ea4:	3e f4       	brtc	.+14     	; 0xeb4 <__divmodhi4_exit>

00000ea6 <__divmodhi4_neg1>:
     ea6:	90 95       	com	r25
     ea8:	81 95       	neg	r24
     eaa:	9f 4f       	sbci	r25, 0xFF	; 255
     eac:	08 95       	ret

00000eae <__divmodhi4_neg2>:
     eae:	70 95       	com	r23
     eb0:	61 95       	neg	r22
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255

00000eb4 <__divmodhi4_exit>:
     eb4:	08 95       	ret

00000eb6 <__umulhisi3>:
     eb6:	a2 9f       	mul	r26, r18
     eb8:	b0 01       	movw	r22, r0
     eba:	b3 9f       	mul	r27, r19
     ebc:	c0 01       	movw	r24, r0
     ebe:	a3 9f       	mul	r26, r19
     ec0:	70 0d       	add	r23, r0
     ec2:	81 1d       	adc	r24, r1
     ec4:	11 24       	eor	r1, r1
     ec6:	91 1d       	adc	r25, r1
     ec8:	b2 9f       	mul	r27, r18
     eca:	70 0d       	add	r23, r0
     ecc:	81 1d       	adc	r24, r1
     ece:	11 24       	eor	r1, r1
     ed0:	91 1d       	adc	r25, r1
     ed2:	08 95       	ret

00000ed4 <__udivmodhi4>:
     ed4:	aa 1b       	sub	r26, r26
     ed6:	bb 1b       	sub	r27, r27
     ed8:	51 e1       	ldi	r21, 0x11	; 17
     eda:	07 c0       	rjmp	.+14     	; 0xeea <__udivmodhi4_ep>

00000edc <__udivmodhi4_loop>:
     edc:	aa 1f       	adc	r26, r26
     ede:	bb 1f       	adc	r27, r27
     ee0:	a6 17       	cp	r26, r22
     ee2:	b7 07       	cpc	r27, r23
     ee4:	10 f0       	brcs	.+4      	; 0xeea <__udivmodhi4_ep>
     ee6:	a6 1b       	sub	r26, r22
     ee8:	b7 0b       	sbc	r27, r23

00000eea <__udivmodhi4_ep>:
     eea:	88 1f       	adc	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	5a 95       	dec	r21
     ef0:	a9 f7       	brne	.-22     	; 0xedc <__udivmodhi4_loop>
     ef2:	80 95       	com	r24
     ef4:	90 95       	com	r25
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	08 95       	ret

00000efc <sprintf>:
     efc:	ae e0       	ldi	r26, 0x0E	; 14
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e4 e8       	ldi	r30, 0x84	; 132
     f02:	f7 e0       	ldi	r31, 0x07	; 7
     f04:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__prologue_saves__+0x1c>
     f08:	0d 89       	ldd	r16, Y+21	; 0x15
     f0a:	1e 89       	ldd	r17, Y+22	; 0x16
     f0c:	86 e0       	ldi	r24, 0x06	; 6
     f0e:	8c 83       	std	Y+4, r24	; 0x04
     f10:	1a 83       	std	Y+2, r17	; 0x02
     f12:	09 83       	std	Y+1, r16	; 0x01
     f14:	8f ef       	ldi	r24, 0xFF	; 255
     f16:	9f e7       	ldi	r25, 0x7F	; 127
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
     f1c:	ae 01       	movw	r20, r28
     f1e:	47 5e       	subi	r20, 0xE7	; 231
     f20:	5f 4f       	sbci	r21, 0xFF	; 255
     f22:	6f 89       	ldd	r22, Y+23	; 0x17
     f24:	78 8d       	ldd	r23, Y+24	; 0x18
     f26:	ce 01       	movw	r24, r28
     f28:	01 96       	adiw	r24, 0x01	; 1
     f2a:	0e 94 a0 07 	call	0xf40	; 0xf40 <vfprintf>
     f2e:	ef 81       	ldd	r30, Y+7	; 0x07
     f30:	f8 85       	ldd	r31, Y+8	; 0x08
     f32:	e0 0f       	add	r30, r16
     f34:	f1 1f       	adc	r31, r17
     f36:	10 82       	st	Z, r1
     f38:	2e 96       	adiw	r28, 0x0e	; 14
     f3a:	e4 e0       	ldi	r30, 0x04	; 4
     f3c:	0c 94 8b 0a 	jmp	0x1516	; 0x1516 <__epilogue_restores__+0x1c>

00000f40 <vfprintf>:
     f40:	ab e0       	ldi	r26, 0x0B	; 11
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e6 ea       	ldi	r30, 0xA6	; 166
     f46:	f7 e0       	ldi	r31, 0x07	; 7
     f48:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__prologue_saves__>
     f4c:	6c 01       	movw	r12, r24
     f4e:	7b 01       	movw	r14, r22
     f50:	8a 01       	movw	r16, r20
     f52:	fc 01       	movw	r30, r24
     f54:	17 82       	std	Z+7, r1	; 0x07
     f56:	16 82       	std	Z+6, r1	; 0x06
     f58:	83 81       	ldd	r24, Z+3	; 0x03
     f5a:	81 ff       	sbrs	r24, 1
     f5c:	cc c1       	rjmp	.+920    	; 0x12f6 <vfprintf+0x3b6>
     f5e:	ce 01       	movw	r24, r28
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	3c 01       	movw	r6, r24
     f64:	f6 01       	movw	r30, r12
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	f7 01       	movw	r30, r14
     f6a:	93 fd       	sbrc	r25, 3
     f6c:	85 91       	lpm	r24, Z+
     f6e:	93 ff       	sbrs	r25, 3
     f70:	81 91       	ld	r24, Z+
     f72:	7f 01       	movw	r14, r30
     f74:	88 23       	and	r24, r24
     f76:	09 f4       	brne	.+2      	; 0xf7a <vfprintf+0x3a>
     f78:	ba c1       	rjmp	.+884    	; 0x12ee <vfprintf+0x3ae>
     f7a:	85 32       	cpi	r24, 0x25	; 37
     f7c:	39 f4       	brne	.+14     	; 0xf8c <vfprintf+0x4c>
     f7e:	93 fd       	sbrc	r25, 3
     f80:	85 91       	lpm	r24, Z+
     f82:	93 ff       	sbrs	r25, 3
     f84:	81 91       	ld	r24, Z+
     f86:	7f 01       	movw	r14, r30
     f88:	85 32       	cpi	r24, 0x25	; 37
     f8a:	29 f4       	brne	.+10     	; 0xf96 <vfprintf+0x56>
     f8c:	b6 01       	movw	r22, r12
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
     f94:	e7 cf       	rjmp	.-50     	; 0xf64 <vfprintf+0x24>
     f96:	91 2c       	mov	r9, r1
     f98:	21 2c       	mov	r2, r1
     f9a:	31 2c       	mov	r3, r1
     f9c:	ff e1       	ldi	r31, 0x1F	; 31
     f9e:	f3 15       	cp	r31, r3
     fa0:	d8 f0       	brcs	.+54     	; 0xfd8 <vfprintf+0x98>
     fa2:	8b 32       	cpi	r24, 0x2B	; 43
     fa4:	79 f0       	breq	.+30     	; 0xfc4 <vfprintf+0x84>
     fa6:	38 f4       	brcc	.+14     	; 0xfb6 <vfprintf+0x76>
     fa8:	80 32       	cpi	r24, 0x20	; 32
     faa:	79 f0       	breq	.+30     	; 0xfca <vfprintf+0x8a>
     fac:	83 32       	cpi	r24, 0x23	; 35
     fae:	a1 f4       	brne	.+40     	; 0xfd8 <vfprintf+0x98>
     fb0:	23 2d       	mov	r18, r3
     fb2:	20 61       	ori	r18, 0x10	; 16
     fb4:	1d c0       	rjmp	.+58     	; 0xff0 <vfprintf+0xb0>
     fb6:	8d 32       	cpi	r24, 0x2D	; 45
     fb8:	61 f0       	breq	.+24     	; 0xfd2 <vfprintf+0x92>
     fba:	80 33       	cpi	r24, 0x30	; 48
     fbc:	69 f4       	brne	.+26     	; 0xfd8 <vfprintf+0x98>
     fbe:	23 2d       	mov	r18, r3
     fc0:	21 60       	ori	r18, 0x01	; 1
     fc2:	16 c0       	rjmp	.+44     	; 0xff0 <vfprintf+0xb0>
     fc4:	83 2d       	mov	r24, r3
     fc6:	82 60       	ori	r24, 0x02	; 2
     fc8:	38 2e       	mov	r3, r24
     fca:	e3 2d       	mov	r30, r3
     fcc:	e4 60       	ori	r30, 0x04	; 4
     fce:	3e 2e       	mov	r3, r30
     fd0:	2a c0       	rjmp	.+84     	; 0x1026 <vfprintf+0xe6>
     fd2:	f3 2d       	mov	r31, r3
     fd4:	f8 60       	ori	r31, 0x08	; 8
     fd6:	1d c0       	rjmp	.+58     	; 0x1012 <vfprintf+0xd2>
     fd8:	37 fc       	sbrc	r3, 7
     fda:	2d c0       	rjmp	.+90     	; 0x1036 <vfprintf+0xf6>
     fdc:	20 ed       	ldi	r18, 0xD0	; 208
     fde:	28 0f       	add	r18, r24
     fe0:	2a 30       	cpi	r18, 0x0A	; 10
     fe2:	40 f0       	brcs	.+16     	; 0xff4 <vfprintf+0xb4>
     fe4:	8e 32       	cpi	r24, 0x2E	; 46
     fe6:	b9 f4       	brne	.+46     	; 0x1016 <vfprintf+0xd6>
     fe8:	36 fc       	sbrc	r3, 6
     fea:	81 c1       	rjmp	.+770    	; 0x12ee <vfprintf+0x3ae>
     fec:	23 2d       	mov	r18, r3
     fee:	20 64       	ori	r18, 0x40	; 64
     ff0:	32 2e       	mov	r3, r18
     ff2:	19 c0       	rjmp	.+50     	; 0x1026 <vfprintf+0xe6>
     ff4:	36 fe       	sbrs	r3, 6
     ff6:	06 c0       	rjmp	.+12     	; 0x1004 <vfprintf+0xc4>
     ff8:	8a e0       	ldi	r24, 0x0A	; 10
     ffa:	98 9e       	mul	r9, r24
     ffc:	20 0d       	add	r18, r0
     ffe:	11 24       	eor	r1, r1
    1000:	92 2e       	mov	r9, r18
    1002:	11 c0       	rjmp	.+34     	; 0x1026 <vfprintf+0xe6>
    1004:	ea e0       	ldi	r30, 0x0A	; 10
    1006:	2e 9e       	mul	r2, r30
    1008:	20 0d       	add	r18, r0
    100a:	11 24       	eor	r1, r1
    100c:	22 2e       	mov	r2, r18
    100e:	f3 2d       	mov	r31, r3
    1010:	f0 62       	ori	r31, 0x20	; 32
    1012:	3f 2e       	mov	r3, r31
    1014:	08 c0       	rjmp	.+16     	; 0x1026 <vfprintf+0xe6>
    1016:	8c 36       	cpi	r24, 0x6C	; 108
    1018:	21 f4       	brne	.+8      	; 0x1022 <vfprintf+0xe2>
    101a:	83 2d       	mov	r24, r3
    101c:	80 68       	ori	r24, 0x80	; 128
    101e:	38 2e       	mov	r3, r24
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <vfprintf+0xe6>
    1022:	88 36       	cpi	r24, 0x68	; 104
    1024:	41 f4       	brne	.+16     	; 0x1036 <vfprintf+0xf6>
    1026:	f7 01       	movw	r30, r14
    1028:	93 fd       	sbrc	r25, 3
    102a:	85 91       	lpm	r24, Z+
    102c:	93 ff       	sbrs	r25, 3
    102e:	81 91       	ld	r24, Z+
    1030:	7f 01       	movw	r14, r30
    1032:	81 11       	cpse	r24, r1
    1034:	b3 cf       	rjmp	.-154    	; 0xf9c <vfprintf+0x5c>
    1036:	98 2f       	mov	r25, r24
    1038:	9f 7d       	andi	r25, 0xDF	; 223
    103a:	95 54       	subi	r25, 0x45	; 69
    103c:	93 30       	cpi	r25, 0x03	; 3
    103e:	28 f4       	brcc	.+10     	; 0x104a <vfprintf+0x10a>
    1040:	0c 5f       	subi	r16, 0xFC	; 252
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
    1044:	9f e3       	ldi	r25, 0x3F	; 63
    1046:	99 83       	std	Y+1, r25	; 0x01
    1048:	0d c0       	rjmp	.+26     	; 0x1064 <vfprintf+0x124>
    104a:	83 36       	cpi	r24, 0x63	; 99
    104c:	31 f0       	breq	.+12     	; 0x105a <vfprintf+0x11a>
    104e:	83 37       	cpi	r24, 0x73	; 115
    1050:	71 f0       	breq	.+28     	; 0x106e <vfprintf+0x12e>
    1052:	83 35       	cpi	r24, 0x53	; 83
    1054:	09 f0       	breq	.+2      	; 0x1058 <vfprintf+0x118>
    1056:	59 c0       	rjmp	.+178    	; 0x110a <vfprintf+0x1ca>
    1058:	21 c0       	rjmp	.+66     	; 0x109c <vfprintf+0x15c>
    105a:	f8 01       	movw	r30, r16
    105c:	80 81       	ld	r24, Z
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	0e 5f       	subi	r16, 0xFE	; 254
    1062:	1f 4f       	sbci	r17, 0xFF	; 255
    1064:	88 24       	eor	r8, r8
    1066:	83 94       	inc	r8
    1068:	91 2c       	mov	r9, r1
    106a:	53 01       	movw	r10, r6
    106c:	13 c0       	rjmp	.+38     	; 0x1094 <vfprintf+0x154>
    106e:	28 01       	movw	r4, r16
    1070:	f2 e0       	ldi	r31, 0x02	; 2
    1072:	4f 0e       	add	r4, r31
    1074:	51 1c       	adc	r5, r1
    1076:	f8 01       	movw	r30, r16
    1078:	a0 80       	ld	r10, Z
    107a:	b1 80       	ldd	r11, Z+1	; 0x01
    107c:	36 fe       	sbrs	r3, 6
    107e:	03 c0       	rjmp	.+6      	; 0x1086 <vfprintf+0x146>
    1080:	69 2d       	mov	r22, r9
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	02 c0       	rjmp	.+4      	; 0x108a <vfprintf+0x14a>
    1086:	6f ef       	ldi	r22, 0xFF	; 255
    1088:	7f ef       	ldi	r23, 0xFF	; 255
    108a:	c5 01       	movw	r24, r10
    108c:	0e 94 8c 09 	call	0x1318	; 0x1318 <strnlen>
    1090:	4c 01       	movw	r8, r24
    1092:	82 01       	movw	r16, r4
    1094:	f3 2d       	mov	r31, r3
    1096:	ff 77       	andi	r31, 0x7F	; 127
    1098:	3f 2e       	mov	r3, r31
    109a:	16 c0       	rjmp	.+44     	; 0x10c8 <vfprintf+0x188>
    109c:	28 01       	movw	r4, r16
    109e:	22 e0       	ldi	r18, 0x02	; 2
    10a0:	42 0e       	add	r4, r18
    10a2:	51 1c       	adc	r5, r1
    10a4:	f8 01       	movw	r30, r16
    10a6:	a0 80       	ld	r10, Z
    10a8:	b1 80       	ldd	r11, Z+1	; 0x01
    10aa:	36 fe       	sbrs	r3, 6
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <vfprintf+0x174>
    10ae:	69 2d       	mov	r22, r9
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <vfprintf+0x178>
    10b4:	6f ef       	ldi	r22, 0xFF	; 255
    10b6:	7f ef       	ldi	r23, 0xFF	; 255
    10b8:	c5 01       	movw	r24, r10
    10ba:	0e 94 81 09 	call	0x1302	; 0x1302 <strnlen_P>
    10be:	4c 01       	movw	r8, r24
    10c0:	f3 2d       	mov	r31, r3
    10c2:	f0 68       	ori	r31, 0x80	; 128
    10c4:	3f 2e       	mov	r3, r31
    10c6:	82 01       	movw	r16, r4
    10c8:	33 fc       	sbrc	r3, 3
    10ca:	1b c0       	rjmp	.+54     	; 0x1102 <vfprintf+0x1c2>
    10cc:	82 2d       	mov	r24, r2
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	88 16       	cp	r8, r24
    10d2:	99 06       	cpc	r9, r25
    10d4:	b0 f4       	brcc	.+44     	; 0x1102 <vfprintf+0x1c2>
    10d6:	b6 01       	movw	r22, r12
    10d8:	80 e2       	ldi	r24, 0x20	; 32
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    10e0:	2a 94       	dec	r2
    10e2:	f4 cf       	rjmp	.-24     	; 0x10cc <vfprintf+0x18c>
    10e4:	f5 01       	movw	r30, r10
    10e6:	37 fc       	sbrc	r3, 7
    10e8:	85 91       	lpm	r24, Z+
    10ea:	37 fe       	sbrs	r3, 7
    10ec:	81 91       	ld	r24, Z+
    10ee:	5f 01       	movw	r10, r30
    10f0:	b6 01       	movw	r22, r12
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    10f8:	21 10       	cpse	r2, r1
    10fa:	2a 94       	dec	r2
    10fc:	21 e0       	ldi	r18, 0x01	; 1
    10fe:	82 1a       	sub	r8, r18
    1100:	91 08       	sbc	r9, r1
    1102:	81 14       	cp	r8, r1
    1104:	91 04       	cpc	r9, r1
    1106:	71 f7       	brne	.-36     	; 0x10e4 <vfprintf+0x1a4>
    1108:	e8 c0       	rjmp	.+464    	; 0x12da <vfprintf+0x39a>
    110a:	84 36       	cpi	r24, 0x64	; 100
    110c:	11 f0       	breq	.+4      	; 0x1112 <vfprintf+0x1d2>
    110e:	89 36       	cpi	r24, 0x69	; 105
    1110:	41 f5       	brne	.+80     	; 0x1162 <vfprintf+0x222>
    1112:	f8 01       	movw	r30, r16
    1114:	37 fe       	sbrs	r3, 7
    1116:	07 c0       	rjmp	.+14     	; 0x1126 <vfprintf+0x1e6>
    1118:	60 81       	ld	r22, Z
    111a:	71 81       	ldd	r23, Z+1	; 0x01
    111c:	82 81       	ldd	r24, Z+2	; 0x02
    111e:	93 81       	ldd	r25, Z+3	; 0x03
    1120:	0c 5f       	subi	r16, 0xFC	; 252
    1122:	1f 4f       	sbci	r17, 0xFF	; 255
    1124:	08 c0       	rjmp	.+16     	; 0x1136 <vfprintf+0x1f6>
    1126:	60 81       	ld	r22, Z
    1128:	71 81       	ldd	r23, Z+1	; 0x01
    112a:	07 2e       	mov	r0, r23
    112c:	00 0c       	add	r0, r0
    112e:	88 0b       	sbc	r24, r24
    1130:	99 0b       	sbc	r25, r25
    1132:	0e 5f       	subi	r16, 0xFE	; 254
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
    1136:	f3 2d       	mov	r31, r3
    1138:	ff 76       	andi	r31, 0x6F	; 111
    113a:	3f 2e       	mov	r3, r31
    113c:	97 ff       	sbrs	r25, 7
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <vfprintf+0x212>
    1140:	90 95       	com	r25
    1142:	80 95       	com	r24
    1144:	70 95       	com	r23
    1146:	61 95       	neg	r22
    1148:	7f 4f       	sbci	r23, 0xFF	; 255
    114a:	8f 4f       	sbci	r24, 0xFF	; 255
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	f0 68       	ori	r31, 0x80	; 128
    1150:	3f 2e       	mov	r3, r31
    1152:	2a e0       	ldi	r18, 0x0A	; 10
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	a3 01       	movw	r20, r6
    1158:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__ultoa_invert>
    115c:	88 2e       	mov	r8, r24
    115e:	86 18       	sub	r8, r6
    1160:	45 c0       	rjmp	.+138    	; 0x11ec <vfprintf+0x2ac>
    1162:	85 37       	cpi	r24, 0x75	; 117
    1164:	31 f4       	brne	.+12     	; 0x1172 <vfprintf+0x232>
    1166:	23 2d       	mov	r18, r3
    1168:	2f 7e       	andi	r18, 0xEF	; 239
    116a:	b2 2e       	mov	r11, r18
    116c:	2a e0       	ldi	r18, 0x0A	; 10
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	25 c0       	rjmp	.+74     	; 0x11bc <vfprintf+0x27c>
    1172:	93 2d       	mov	r25, r3
    1174:	99 7f       	andi	r25, 0xF9	; 249
    1176:	b9 2e       	mov	r11, r25
    1178:	8f 36       	cpi	r24, 0x6F	; 111
    117a:	c1 f0       	breq	.+48     	; 0x11ac <vfprintf+0x26c>
    117c:	18 f4       	brcc	.+6      	; 0x1184 <vfprintf+0x244>
    117e:	88 35       	cpi	r24, 0x58	; 88
    1180:	79 f0       	breq	.+30     	; 0x11a0 <vfprintf+0x260>
    1182:	b5 c0       	rjmp	.+362    	; 0x12ee <vfprintf+0x3ae>
    1184:	80 37       	cpi	r24, 0x70	; 112
    1186:	19 f0       	breq	.+6      	; 0x118e <vfprintf+0x24e>
    1188:	88 37       	cpi	r24, 0x78	; 120
    118a:	21 f0       	breq	.+8      	; 0x1194 <vfprintf+0x254>
    118c:	b0 c0       	rjmp	.+352    	; 0x12ee <vfprintf+0x3ae>
    118e:	e9 2f       	mov	r30, r25
    1190:	e0 61       	ori	r30, 0x10	; 16
    1192:	be 2e       	mov	r11, r30
    1194:	b4 fe       	sbrs	r11, 4
    1196:	0d c0       	rjmp	.+26     	; 0x11b2 <vfprintf+0x272>
    1198:	fb 2d       	mov	r31, r11
    119a:	f4 60       	ori	r31, 0x04	; 4
    119c:	bf 2e       	mov	r11, r31
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <vfprintf+0x272>
    11a0:	34 fe       	sbrs	r3, 4
    11a2:	0a c0       	rjmp	.+20     	; 0x11b8 <vfprintf+0x278>
    11a4:	29 2f       	mov	r18, r25
    11a6:	26 60       	ori	r18, 0x06	; 6
    11a8:	b2 2e       	mov	r11, r18
    11aa:	06 c0       	rjmp	.+12     	; 0x11b8 <vfprintf+0x278>
    11ac:	28 e0       	ldi	r18, 0x08	; 8
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	05 c0       	rjmp	.+10     	; 0x11bc <vfprintf+0x27c>
    11b2:	20 e1       	ldi	r18, 0x10	; 16
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <vfprintf+0x27c>
    11b8:	20 e1       	ldi	r18, 0x10	; 16
    11ba:	32 e0       	ldi	r19, 0x02	; 2
    11bc:	f8 01       	movw	r30, r16
    11be:	b7 fe       	sbrs	r11, 7
    11c0:	07 c0       	rjmp	.+14     	; 0x11d0 <vfprintf+0x290>
    11c2:	60 81       	ld	r22, Z
    11c4:	71 81       	ldd	r23, Z+1	; 0x01
    11c6:	82 81       	ldd	r24, Z+2	; 0x02
    11c8:	93 81       	ldd	r25, Z+3	; 0x03
    11ca:	0c 5f       	subi	r16, 0xFC	; 252
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <vfprintf+0x29c>
    11d0:	60 81       	ld	r22, Z
    11d2:	71 81       	ldd	r23, Z+1	; 0x01
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 5f       	subi	r16, 0xFE	; 254
    11da:	1f 4f       	sbci	r17, 0xFF	; 255
    11dc:	a3 01       	movw	r20, r6
    11de:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__ultoa_invert>
    11e2:	88 2e       	mov	r8, r24
    11e4:	86 18       	sub	r8, r6
    11e6:	fb 2d       	mov	r31, r11
    11e8:	ff 77       	andi	r31, 0x7F	; 127
    11ea:	3f 2e       	mov	r3, r31
    11ec:	36 fe       	sbrs	r3, 6
    11ee:	0d c0       	rjmp	.+26     	; 0x120a <vfprintf+0x2ca>
    11f0:	23 2d       	mov	r18, r3
    11f2:	2e 7f       	andi	r18, 0xFE	; 254
    11f4:	a2 2e       	mov	r10, r18
    11f6:	89 14       	cp	r8, r9
    11f8:	58 f4       	brcc	.+22     	; 0x1210 <vfprintf+0x2d0>
    11fa:	34 fe       	sbrs	r3, 4
    11fc:	0b c0       	rjmp	.+22     	; 0x1214 <vfprintf+0x2d4>
    11fe:	32 fc       	sbrc	r3, 2
    1200:	09 c0       	rjmp	.+18     	; 0x1214 <vfprintf+0x2d4>
    1202:	83 2d       	mov	r24, r3
    1204:	8e 7e       	andi	r24, 0xEE	; 238
    1206:	a8 2e       	mov	r10, r24
    1208:	05 c0       	rjmp	.+10     	; 0x1214 <vfprintf+0x2d4>
    120a:	b8 2c       	mov	r11, r8
    120c:	a3 2c       	mov	r10, r3
    120e:	03 c0       	rjmp	.+6      	; 0x1216 <vfprintf+0x2d6>
    1210:	b8 2c       	mov	r11, r8
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <vfprintf+0x2d6>
    1214:	b9 2c       	mov	r11, r9
    1216:	a4 fe       	sbrs	r10, 4
    1218:	0f c0       	rjmp	.+30     	; 0x1238 <vfprintf+0x2f8>
    121a:	fe 01       	movw	r30, r28
    121c:	e8 0d       	add	r30, r8
    121e:	f1 1d       	adc	r31, r1
    1220:	80 81       	ld	r24, Z
    1222:	80 33       	cpi	r24, 0x30	; 48
    1224:	21 f4       	brne	.+8      	; 0x122e <vfprintf+0x2ee>
    1226:	9a 2d       	mov	r25, r10
    1228:	99 7e       	andi	r25, 0xE9	; 233
    122a:	a9 2e       	mov	r10, r25
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <vfprintf+0x300>
    122e:	a2 fe       	sbrs	r10, 2
    1230:	06 c0       	rjmp	.+12     	; 0x123e <vfprintf+0x2fe>
    1232:	b3 94       	inc	r11
    1234:	b3 94       	inc	r11
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <vfprintf+0x300>
    1238:	8a 2d       	mov	r24, r10
    123a:	86 78       	andi	r24, 0x86	; 134
    123c:	09 f0       	breq	.+2      	; 0x1240 <vfprintf+0x300>
    123e:	b3 94       	inc	r11
    1240:	a3 fc       	sbrc	r10, 3
    1242:	11 c0       	rjmp	.+34     	; 0x1266 <vfprintf+0x326>
    1244:	a0 fe       	sbrs	r10, 0
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <vfprintf+0x314>
    1248:	b2 14       	cp	r11, r2
    124a:	88 f4       	brcc	.+34     	; 0x126e <vfprintf+0x32e>
    124c:	28 0c       	add	r2, r8
    124e:	92 2c       	mov	r9, r2
    1250:	9b 18       	sub	r9, r11
    1252:	0e c0       	rjmp	.+28     	; 0x1270 <vfprintf+0x330>
    1254:	b2 14       	cp	r11, r2
    1256:	60 f4       	brcc	.+24     	; 0x1270 <vfprintf+0x330>
    1258:	b6 01       	movw	r22, r12
    125a:	80 e2       	ldi	r24, 0x20	; 32
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    1262:	b3 94       	inc	r11
    1264:	f7 cf       	rjmp	.-18     	; 0x1254 <vfprintf+0x314>
    1266:	b2 14       	cp	r11, r2
    1268:	18 f4       	brcc	.+6      	; 0x1270 <vfprintf+0x330>
    126a:	2b 18       	sub	r2, r11
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <vfprintf+0x332>
    126e:	98 2c       	mov	r9, r8
    1270:	21 2c       	mov	r2, r1
    1272:	a4 fe       	sbrs	r10, 4
    1274:	10 c0       	rjmp	.+32     	; 0x1296 <vfprintf+0x356>
    1276:	b6 01       	movw	r22, r12
    1278:	80 e3       	ldi	r24, 0x30	; 48
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    1280:	a2 fe       	sbrs	r10, 2
    1282:	17 c0       	rjmp	.+46     	; 0x12b2 <vfprintf+0x372>
    1284:	a1 fc       	sbrc	r10, 1
    1286:	03 c0       	rjmp	.+6      	; 0x128e <vfprintf+0x34e>
    1288:	88 e7       	ldi	r24, 0x78	; 120
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <vfprintf+0x352>
    128e:	88 e5       	ldi	r24, 0x58	; 88
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	b6 01       	movw	r22, r12
    1294:	0c c0       	rjmp	.+24     	; 0x12ae <vfprintf+0x36e>
    1296:	8a 2d       	mov	r24, r10
    1298:	86 78       	andi	r24, 0x86	; 134
    129a:	59 f0       	breq	.+22     	; 0x12b2 <vfprintf+0x372>
    129c:	a1 fe       	sbrs	r10, 1
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x364>
    12a0:	8b e2       	ldi	r24, 0x2B	; 43
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <vfprintf+0x366>
    12a4:	80 e2       	ldi	r24, 0x20	; 32
    12a6:	a7 fc       	sbrc	r10, 7
    12a8:	8d e2       	ldi	r24, 0x2D	; 45
    12aa:	b6 01       	movw	r22, r12
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    12b2:	89 14       	cp	r8, r9
    12b4:	38 f4       	brcc	.+14     	; 0x12c4 <vfprintf+0x384>
    12b6:	b6 01       	movw	r22, r12
    12b8:	80 e3       	ldi	r24, 0x30	; 48
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    12c0:	9a 94       	dec	r9
    12c2:	f7 cf       	rjmp	.-18     	; 0x12b2 <vfprintf+0x372>
    12c4:	8a 94       	dec	r8
    12c6:	f3 01       	movw	r30, r6
    12c8:	e8 0d       	add	r30, r8
    12ca:	f1 1d       	adc	r31, r1
    12cc:	80 81       	ld	r24, Z
    12ce:	b6 01       	movw	r22, r12
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    12d6:	81 10       	cpse	r8, r1
    12d8:	f5 cf       	rjmp	.-22     	; 0x12c4 <vfprintf+0x384>
    12da:	22 20       	and	r2, r2
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <vfprintf+0x3a0>
    12de:	42 ce       	rjmp	.-892    	; 0xf64 <vfprintf+0x24>
    12e0:	b6 01       	movw	r22, r12
    12e2:	80 e2       	ldi	r24, 0x20	; 32
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 97 09 	call	0x132e	; 0x132e <fputc>
    12ea:	2a 94       	dec	r2
    12ec:	f6 cf       	rjmp	.-20     	; 0x12da <vfprintf+0x39a>
    12ee:	f6 01       	movw	r30, r12
    12f0:	86 81       	ldd	r24, Z+6	; 0x06
    12f2:	97 81       	ldd	r25, Z+7	; 0x07
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <vfprintf+0x3ba>
    12f6:	8f ef       	ldi	r24, 0xFF	; 255
    12f8:	9f ef       	ldi	r25, 0xFF	; 255
    12fa:	2b 96       	adiw	r28, 0x0b	; 11
    12fc:	e2 e1       	ldi	r30, 0x12	; 18
    12fe:	0c 94 7d 0a 	jmp	0x14fa	; 0x14fa <__epilogue_restores__>

00001302 <strnlen_P>:
    1302:	fc 01       	movw	r30, r24
    1304:	05 90       	lpm	r0, Z+
    1306:	61 50       	subi	r22, 0x01	; 1
    1308:	70 40       	sbci	r23, 0x00	; 0
    130a:	01 10       	cpse	r0, r1
    130c:	d8 f7       	brcc	.-10     	; 0x1304 <strnlen_P+0x2>
    130e:	80 95       	com	r24
    1310:	90 95       	com	r25
    1312:	8e 0f       	add	r24, r30
    1314:	9f 1f       	adc	r25, r31
    1316:	08 95       	ret

00001318 <strnlen>:
    1318:	fc 01       	movw	r30, r24
    131a:	61 50       	subi	r22, 0x01	; 1
    131c:	70 40       	sbci	r23, 0x00	; 0
    131e:	01 90       	ld	r0, Z+
    1320:	01 10       	cpse	r0, r1
    1322:	d8 f7       	brcc	.-10     	; 0x131a <strnlen+0x2>
    1324:	80 95       	com	r24
    1326:	90 95       	com	r25
    1328:	8e 0f       	add	r24, r30
    132a:	9f 1f       	adc	r25, r31
    132c:	08 95       	ret

0000132e <fputc>:
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	fb 01       	movw	r30, r22
    1338:	23 81       	ldd	r18, Z+3	; 0x03
    133a:	21 fd       	sbrc	r18, 1
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <fputc+0x16>
    133e:	8f ef       	ldi	r24, 0xFF	; 255
    1340:	9f ef       	ldi	r25, 0xFF	; 255
    1342:	2c c0       	rjmp	.+88     	; 0x139c <fputc+0x6e>
    1344:	22 ff       	sbrs	r18, 2
    1346:	16 c0       	rjmp	.+44     	; 0x1374 <fputc+0x46>
    1348:	46 81       	ldd	r20, Z+6	; 0x06
    134a:	57 81       	ldd	r21, Z+7	; 0x07
    134c:	24 81       	ldd	r18, Z+4	; 0x04
    134e:	35 81       	ldd	r19, Z+5	; 0x05
    1350:	42 17       	cp	r20, r18
    1352:	53 07       	cpc	r21, r19
    1354:	44 f4       	brge	.+16     	; 0x1366 <fputc+0x38>
    1356:	a0 81       	ld	r26, Z
    1358:	b1 81       	ldd	r27, Z+1	; 0x01
    135a:	9d 01       	movw	r18, r26
    135c:	2f 5f       	subi	r18, 0xFF	; 255
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	31 83       	std	Z+1, r19	; 0x01
    1362:	20 83       	st	Z, r18
    1364:	8c 93       	st	X, r24
    1366:	26 81       	ldd	r18, Z+6	; 0x06
    1368:	37 81       	ldd	r19, Z+7	; 0x07
    136a:	2f 5f       	subi	r18, 0xFF	; 255
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	37 83       	std	Z+7, r19	; 0x07
    1370:	26 83       	std	Z+6, r18	; 0x06
    1372:	14 c0       	rjmp	.+40     	; 0x139c <fputc+0x6e>
    1374:	8b 01       	movw	r16, r22
    1376:	ec 01       	movw	r28, r24
    1378:	fb 01       	movw	r30, r22
    137a:	00 84       	ldd	r0, Z+8	; 0x08
    137c:	f1 85       	ldd	r31, Z+9	; 0x09
    137e:	e0 2d       	mov	r30, r0
    1380:	09 95       	icall
    1382:	89 2b       	or	r24, r25
    1384:	e1 f6       	brne	.-72     	; 0x133e <fputc+0x10>
    1386:	d8 01       	movw	r26, r16
    1388:	16 96       	adiw	r26, 0x06	; 6
    138a:	8d 91       	ld	r24, X+
    138c:	9c 91       	ld	r25, X
    138e:	17 97       	sbiw	r26, 0x07	; 7
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	17 96       	adiw	r26, 0x07	; 7
    1394:	9c 93       	st	X, r25
    1396:	8e 93       	st	-X, r24
    1398:	16 97       	sbiw	r26, 0x06	; 6
    139a:	ce 01       	movw	r24, r28
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	08 95       	ret

000013a6 <__ultoa_invert>:
    13a6:	fa 01       	movw	r30, r20
    13a8:	aa 27       	eor	r26, r26
    13aa:	28 30       	cpi	r18, 0x08	; 8
    13ac:	51 f1       	breq	.+84     	; 0x1402 <__ultoa_invert+0x5c>
    13ae:	20 31       	cpi	r18, 0x10	; 16
    13b0:	81 f1       	breq	.+96     	; 0x1412 <__ultoa_invert+0x6c>
    13b2:	e8 94       	clt
    13b4:	6f 93       	push	r22
    13b6:	6e 7f       	andi	r22, 0xFE	; 254
    13b8:	6e 5f       	subi	r22, 0xFE	; 254
    13ba:	7f 4f       	sbci	r23, 0xFF	; 255
    13bc:	8f 4f       	sbci	r24, 0xFF	; 255
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	af 4f       	sbci	r26, 0xFF	; 255
    13c2:	b1 e0       	ldi	r27, 0x01	; 1
    13c4:	3e d0       	rcall	.+124    	; 0x1442 <__ultoa_invert+0x9c>
    13c6:	b4 e0       	ldi	r27, 0x04	; 4
    13c8:	3c d0       	rcall	.+120    	; 0x1442 <__ultoa_invert+0x9c>
    13ca:	67 0f       	add	r22, r23
    13cc:	78 1f       	adc	r23, r24
    13ce:	89 1f       	adc	r24, r25
    13d0:	9a 1f       	adc	r25, r26
    13d2:	a1 1d       	adc	r26, r1
    13d4:	68 0f       	add	r22, r24
    13d6:	79 1f       	adc	r23, r25
    13d8:	8a 1f       	adc	r24, r26
    13da:	91 1d       	adc	r25, r1
    13dc:	a1 1d       	adc	r26, r1
    13de:	6a 0f       	add	r22, r26
    13e0:	71 1d       	adc	r23, r1
    13e2:	81 1d       	adc	r24, r1
    13e4:	91 1d       	adc	r25, r1
    13e6:	a1 1d       	adc	r26, r1
    13e8:	20 d0       	rcall	.+64     	; 0x142a <__ultoa_invert+0x84>
    13ea:	09 f4       	brne	.+2      	; 0x13ee <__ultoa_invert+0x48>
    13ec:	68 94       	set
    13ee:	3f 91       	pop	r19
    13f0:	2a e0       	ldi	r18, 0x0A	; 10
    13f2:	26 9f       	mul	r18, r22
    13f4:	11 24       	eor	r1, r1
    13f6:	30 19       	sub	r19, r0
    13f8:	30 5d       	subi	r19, 0xD0	; 208
    13fa:	31 93       	st	Z+, r19
    13fc:	de f6       	brtc	.-74     	; 0x13b4 <__ultoa_invert+0xe>
    13fe:	cf 01       	movw	r24, r30
    1400:	08 95       	ret
    1402:	46 2f       	mov	r20, r22
    1404:	47 70       	andi	r20, 0x07	; 7
    1406:	40 5d       	subi	r20, 0xD0	; 208
    1408:	41 93       	st	Z+, r20
    140a:	b3 e0       	ldi	r27, 0x03	; 3
    140c:	0f d0       	rcall	.+30     	; 0x142c <__ultoa_invert+0x86>
    140e:	c9 f7       	brne	.-14     	; 0x1402 <__ultoa_invert+0x5c>
    1410:	f6 cf       	rjmp	.-20     	; 0x13fe <__ultoa_invert+0x58>
    1412:	46 2f       	mov	r20, r22
    1414:	4f 70       	andi	r20, 0x0F	; 15
    1416:	40 5d       	subi	r20, 0xD0	; 208
    1418:	4a 33       	cpi	r20, 0x3A	; 58
    141a:	18 f0       	brcs	.+6      	; 0x1422 <__ultoa_invert+0x7c>
    141c:	49 5d       	subi	r20, 0xD9	; 217
    141e:	31 fd       	sbrc	r19, 1
    1420:	40 52       	subi	r20, 0x20	; 32
    1422:	41 93       	st	Z+, r20
    1424:	02 d0       	rcall	.+4      	; 0x142a <__ultoa_invert+0x84>
    1426:	a9 f7       	brne	.-22     	; 0x1412 <__ultoa_invert+0x6c>
    1428:	ea cf       	rjmp	.-44     	; 0x13fe <__ultoa_invert+0x58>
    142a:	b4 e0       	ldi	r27, 0x04	; 4
    142c:	a6 95       	lsr	r26
    142e:	97 95       	ror	r25
    1430:	87 95       	ror	r24
    1432:	77 95       	ror	r23
    1434:	67 95       	ror	r22
    1436:	ba 95       	dec	r27
    1438:	c9 f7       	brne	.-14     	; 0x142c <__ultoa_invert+0x86>
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	61 05       	cpc	r22, r1
    143e:	71 05       	cpc	r23, r1
    1440:	08 95       	ret
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	0a 2e       	mov	r0, r26
    1448:	06 94       	lsr	r0
    144a:	57 95       	ror	r21
    144c:	47 95       	ror	r20
    144e:	37 95       	ror	r19
    1450:	27 95       	ror	r18
    1452:	ba 95       	dec	r27
    1454:	c9 f7       	brne	.-14     	; 0x1448 <__ultoa_invert+0xa2>
    1456:	62 0f       	add	r22, r18
    1458:	73 1f       	adc	r23, r19
    145a:	84 1f       	adc	r24, r20
    145c:	95 1f       	adc	r25, r21
    145e:	a0 1d       	adc	r26, r0
    1460:	08 95       	ret

00001462 <eeprom_read_dword>:
    1462:	a6 e1       	ldi	r26, 0x16	; 22
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	44 e0       	ldi	r20, 0x04	; 4
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	0c 94 46 0a 	jmp	0x148c	; 0x148c <eeprom_read_blraw>

0000146e <eeprom_write_dword>:
    146e:	24 2f       	mov	r18, r20
    1470:	0e 94 55 0a 	call	0x14aa	; 0x14aa <eeprom_write_r18>
    1474:	25 2f       	mov	r18, r21
    1476:	0e 94 55 0a 	call	0x14aa	; 0x14aa <eeprom_write_r18>
    147a:	0c 94 3f 0a 	jmp	0x147e	; 0x147e <eeprom_write_word>

0000147e <eeprom_write_word>:
    147e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <eeprom_write_byte>
    1482:	27 2f       	mov	r18, r23
    1484:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <eeprom_write_r18>

00001488 <eeprom_read_block>:
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22

0000148c <eeprom_read_blraw>:
    148c:	fc 01       	movw	r30, r24
    148e:	e1 99       	sbic	0x1c, 1	; 28
    1490:	fe cf       	rjmp	.-4      	; 0x148e <eeprom_read_blraw+0x2>
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <eeprom_read_blraw+0x14>
    1494:	ff bb       	out	0x1f, r31	; 31
    1496:	ee bb       	out	0x1e, r30	; 30
    1498:	e0 9a       	sbi	0x1c, 0	; 28
    149a:	31 96       	adiw	r30, 0x01	; 1
    149c:	0d b2       	in	r0, 0x1d	; 29
    149e:	0d 92       	st	X+, r0
    14a0:	41 50       	subi	r20, 0x01	; 1
    14a2:	50 40       	sbci	r21, 0x00	; 0
    14a4:	b8 f7       	brcc	.-18     	; 0x1494 <eeprom_read_blraw+0x8>
    14a6:	08 95       	ret

000014a8 <eeprom_write_byte>:
    14a8:	26 2f       	mov	r18, r22

000014aa <eeprom_write_r18>:
    14aa:	e1 99       	sbic	0x1c, 1	; 28
    14ac:	fe cf       	rjmp	.-4      	; 0x14aa <eeprom_write_r18>
    14ae:	9f bb       	out	0x1f, r25	; 31
    14b0:	8e bb       	out	0x1e, r24	; 30
    14b2:	2d bb       	out	0x1d, r18	; 29
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	e2 9a       	sbi	0x1c, 2	; 28
    14ba:	e1 9a       	sbi	0x1c, 1	; 28
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	08 95       	ret

000014c2 <__prologue_saves__>:
    14c2:	2f 92       	push	r2
    14c4:	3f 92       	push	r3
    14c6:	4f 92       	push	r4
    14c8:	5f 92       	push	r5
    14ca:	6f 92       	push	r6
    14cc:	7f 92       	push	r7
    14ce:	8f 92       	push	r8
    14d0:	9f 92       	push	r9
    14d2:	af 92       	push	r10
    14d4:	bf 92       	push	r11
    14d6:	cf 92       	push	r12
    14d8:	df 92       	push	r13
    14da:	ef 92       	push	r14
    14dc:	ff 92       	push	r15
    14de:	0f 93       	push	r16
    14e0:	1f 93       	push	r17
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
    14ea:	ca 1b       	sub	r28, r26
    14ec:	db 0b       	sbc	r29, r27
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	09 94       	ijmp

000014fa <__epilogue_restores__>:
    14fa:	2a 88       	ldd	r2, Y+18	; 0x12
    14fc:	39 88       	ldd	r3, Y+17	; 0x11
    14fe:	48 88       	ldd	r4, Y+16	; 0x10
    1500:	5f 84       	ldd	r5, Y+15	; 0x0f
    1502:	6e 84       	ldd	r6, Y+14	; 0x0e
    1504:	7d 84       	ldd	r7, Y+13	; 0x0d
    1506:	8c 84       	ldd	r8, Y+12	; 0x0c
    1508:	9b 84       	ldd	r9, Y+11	; 0x0b
    150a:	aa 84       	ldd	r10, Y+10	; 0x0a
    150c:	b9 84       	ldd	r11, Y+9	; 0x09
    150e:	c8 84       	ldd	r12, Y+8	; 0x08
    1510:	df 80       	ldd	r13, Y+7	; 0x07
    1512:	ee 80       	ldd	r14, Y+6	; 0x06
    1514:	fd 80       	ldd	r15, Y+5	; 0x05
    1516:	0c 81       	ldd	r16, Y+4	; 0x04
    1518:	1b 81       	ldd	r17, Y+3	; 0x03
    151a:	aa 81       	ldd	r26, Y+2	; 0x02
    151c:	b9 81       	ldd	r27, Y+1	; 0x01
    151e:	ce 0f       	add	r28, r30
    1520:	d1 1d       	adc	r29, r1
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	ed 01       	movw	r28, r26
    152e:	08 95       	ret

00001530 <_exit>:
    1530:	f8 94       	cli

00001532 <__stop_program>:
    1532:	ff cf       	rjmp	.-2      	; 0x1532 <__stop_program>
