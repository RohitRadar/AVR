/*
 * pose.c
 *
 * Created: 29/09/2021 3:46:44 PM
 * Author : Rohit D
 */ 

#ifndef F_CPU
#define F_CPU 16000000UL
#endif
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include <stdio.h>

#define LCD_Dir  DDRC			/* Define LCD data port direction */
#define LCD_Port PORTC			/* Define LCD data port */
#define RS PC0				/* Define Register Select pin */
#define EN PC1 				/* Define Enable signal pin */

int steps = 0;
int dir = 1;
char text[2];
int fast =1;
int start=-1;
int dist=0;
int dec=0;
int num=0;
int intr=0;
void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
	LCD_Port |= (1<<EN);		/* Enable pulse */
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
	LCD_Port |= (1<<EN);
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
	_delay_ms(2);
}


void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
	LCD_Port|= (1<<EN);
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
	_delay_us(200);
	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
	LCD_Port |= (1<<EN);
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
	LCD_Command(0x0c);              /* Display on cursor off*/
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
	LCD_Command(0x01);              /* Clear display screen*/
	_delay_ms(2);
}


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
	}
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
}

void LCD_right(){
	LCD_Command(0x14);
	LCD_Command(0x14);
	LCD_Command(0x14);
	LCD_Command(0x14);
	LCD_Command(0x14);
	LCD_Command(0x14);
}

ISR (TIMER1_OVF_vect){
	if (start>0){
		steps = steps+1;
		PORTB ^= (1<<PINB0);
	}
}

int main(void)
{
	MCUCSR |=(1<<JTD);
	MCUCSR |=(1<<JTD);
	TCNT1 = 35535;
	TCCR1A = 0x00;
	TCCR1B = (1<<CS11) | (1<<CS12);
	TIMSK = (1<<TOIE1);
	sei();
	
	DDRB |= 0b00000011;
	DDRD |= 0b00000000;
	PORTD = 0b11111111;
	LCD_Init();			/* Initialization of LCD*/
	LCD_String("Home");	/* Write string on 1st line of LCD*/
	LCD_right();
	LCD_Command(0x14);
	LCD_String("RPM:2");
	LCD_Command(0xC0);		/* Go to 2nd line*/
	LCD_String("Up");
	LCD_Command(0x90);
	LCD_String("Down");
	LCD_Command(0xD0);
	LCD_String("Distance:");
	LCD_Command(0x14);
	LCD_Command(0x14);
	LCD_String(".");
	LCD_Command(0x14);
	LCD_Command(0x14);
	LCD_String("mm");
	LCD_Command(0x10);
	LCD_Command(0x10);
	while (1)
    {
			LCD_Command(0x10); /*2.2*5 ms*/
			LCD_Command(0x10);
			LCD_Command(0x10);
			LCD_Command(0x10);
			LCD_Command(0x10);
			if (steps%20==0){
				dist = 15*(steps/20);
				dec = dist%100;
				num = dist/100;
			}
			sprintf(text, "%d", num); /*2*2.5 ms*/
			if (num<10){
				LCD_Command(0x14);
				LCD_String(text);
			}
			else{
				LCD_String(text);
			}
			LCD_Command(0x14);
			sprintf(text, "%d", dec);
			if (dec==0){
				LCD_String("0");
				LCD_String("0");
			}
			else if(dec<10){
				LCD_String("0");
				LCD_String(text);
			}
			else{
				LCD_String(text);	
			}
			
			if (PIND & (1<<PIND4)){
				if (PIND & (1<<PIND3)){
					start=-1;	
				}
				else{
					LCD_Command(0x80);
					LCD_right();
					LCD_String(" ");
					LCD_Command(0x90);
					LCD_right();
					LCD_String(" ");
					LCD_Command(0xC0);
					LCD_right();
					LCD_String("*");
					LCD_Command(0xD0);
					LCD_right();
					LCD_right();
					LCD_Command(0x14);
					LCD_Command(0x14);
					dir=1;
					start=1;
					PORTB |= (1<<PINB1);
				}
			}
			if (PIND & (1<<PIND5)){
				if (PIND & (1<<PIND2)){
					start=-1;
				}
				else{
					LCD_Command(0xC0);
					LCD_right();
					LCD_String(" ");
					LCD_Command(0x90);
					LCD_right();
					LCD_String("*");
					LCD_Command(0xD0);
					LCD_right();
					LCD_right();
					LCD_Command(0x14);
					LCD_Command(0x14);
					dir=-1;
					start=1;
					PORTB &= ~(1<<PINB1);
				}
			}
			if (PIND & (1<<PIND1)){
				LCD_Command(0x90);
				LCD_right();
				LCD_String(" ");
				LCD_Command(0xC0);
				LCD_right();
				LCD_String(" ");
				LCD_Command(0xD0);
				LCD_right();
				LCD_right();
				LCD_Command(0x14);
				LCD_Command(0x14);
				PORTB |= (1<<PINB1);
				dir=1;
				if (PIND & (1<<PIND3)){
					dir=-1;
				}
				while(dir==1){
					if (PIND & (1<<PIND3)){
						dir=-1;
					}
					PORTB |= (1<<PINB0);
					_delay_ms(1);
					PORTB &= ~(1<<PINB0);
					_delay_ms(1);
				}
				start=-1;
				LCD_Command(0x80);
				LCD_right();
				LCD_String(" ");
				LCD_Command(0xD0);
				LCD_right();
				LCD_right();
				LCD_Command(0x14);
				LCD_Command(0x14);
			}
			if ((PIND&(1<<PIND2)) && dir==-1){
				start=-1;
			}
			if ((PIND&(1<<PIND3)) && dir==1){
				start=-1;
			}
		}
}

